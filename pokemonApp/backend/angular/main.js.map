{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/header/header/header.component.css","webpack:///./src/app/header/header/header.component.html","webpack:///./src/app/header/header/header.component.ts","webpack:///./src/app/pokemon/attack-create/attack-create.component.css","webpack:///./src/app/pokemon/attack-create/attack-create.component.html","webpack:///./src/app/pokemon/attack-create/attack-create.component.ts","webpack:///./src/app/pokemon/attack-list/attack-list.component.css","webpack:///./src/app/pokemon/attack-list/attack-list.component.html","webpack:///./src/app/pokemon/attack-list/attack-list.component.ts","webpack:///./src/app/pokemon/display_dashboard/dashboard/dashboard.component.css","webpack:///./src/app/pokemon/display_dashboard/dashboard/dashboard.component.html","webpack:///./src/app/pokemon/display_dashboard/dashboard/dashboard.component.ts","webpack:///./src/app/pokemon/moveset-create/moveset-create.component.css","webpack:///./src/app/pokemon/moveset-create/moveset-create.component.html","webpack:///./src/app/pokemon/moveset-create/moveset-create.component.ts","webpack:///./src/app/pokemon/moveset-list/moveset-list.component.css","webpack:///./src/app/pokemon/moveset-list/moveset-list.component.html","webpack:///./src/app/pokemon/moveset-list/moveset-list.component.ts","webpack:///./src/app/pokemon/pokemon-create/pokemon-create.component.css","webpack:///./src/app/pokemon/pokemon-create/pokemon-create.component.html","webpack:///./src/app/pokemon/pokemon-create/pokemon-create.component.ts","webpack:///./src/app/pokemon/pokemon-list/pokemon-list.component.css","webpack:///./src/app/pokemon/pokemon-list/pokemon-list.component.html","webpack:///./src/app/pokemon/pokemon-list/pokemon-list.component.ts","webpack:///./src/app/pokemon/stats-create/stats-create.component.css","webpack:///./src/app/pokemon/stats-create/stats-create.component.html","webpack:///./src/app/pokemon/stats-create/stats-create.component.ts","webpack:///./src/app/posts/post-create/post-create.component.css","webpack:///./src/app/posts/post-create/post-create.component.html","webpack:///./src/app/posts/post-create/post-create.component.ts","webpack:///./src/app/posts/post-list/post-list.component.css","webpack:///./src/app/posts/post-list/post-list.component.html","webpack:///./src/app/posts/post-list/post-list.component.ts","webpack:///./src/app/routing/routing.module.ts","webpack:///./src/app/services/attacks.service.ts","webpack:///./src/app/services/pokemon.service.ts","webpack:///./src/app/services/posts.service.ts","webpack:///./src/app/services/stats.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,uBAAuB,uBAAuB,iBAAiB,wBAAwB,KAAK,K;;;;;;;;;;;ACA5F,qL;;;;;;;;;;;;;;;;;;;;;ACC0C;AAQ1C;IALA;QAME,UAAK,GAAG,KAAK,CAAC;IAChB,CAAC;IAFY,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;OACW,YAAY,CAExB;IAAD,mBAAC;CAAA;AAFwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTiC;AACjB;AACyB;AACnB;AACiC;AACH;AAGlB;AACQ;AACO;AAClB;AACmC;AACN;AACM;AACN;AAC5B;AAC+B;AACN;AACa;AACV;AAwCrF;IAAA;IAAyB,CAAC;IAAb,SAAS;QAtCrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;gBACZ,4FAAmB;gBACnB,+EAAe;gBACf,sFAAiB;gBACjB,wGAAsB;gBACtB,kGAAoB;gBACpB,wGAAsB;gBACtB,kGAAoB;gBACpB,qGAAqB;gBACrB,+FAAmB;gBACnB,4GAAkB;gBAClB,kGAAoB;aACrB;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,sEAAa;gBACb,0DAAW;gBACX,4FAAuB;gBACvB,gEAAc;gBACd,+DAAa;gBACb,iEAAe;gBACf,kEAAgB;gBAChB,oEAAkB;gBAClB,+DAAa;gBACb,+DAAa;gBACb,qEAAgB;gBAChB,iEAAe;gBACf,kEAAmB;gBACnB,mEAAiB;gBACjB,gEAAc;gBACd,0EAAwB;aAEzB;YACD,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;AC5DtB,2BAA2B,qBAAqB,KAAK,aAAa,kBAAkB,KAAK,K;;;;;;;;;;;ACAzF,wuB;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AAOlD;IAEE;IAAgB,CAAC;IAEjB,kCAAQ,GAAR;IACA,CAAC;IALU,eAAe;QAL3B,+DAAS,CAAC;YACT,QAAQ,EAAE,YAAY;;;SAGvB,CAAC;;OACW,eAAe,CAO3B;IAAD,sBAAC;CAAA;AAP2B;;;;;;;;;;;;ACP5B,6BAA6B,kCAAkC,KAAK,oBAAoB,kBAAkB,KAAK,K;;;;;;;;;;;ACA/G,mpF;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAkE;AACA;AAClB;AAGE;AAOlD;IAEE,+BAAoB,QAAqB,EAAU,cAA8B,EAAU,aAA6B;QAApG,aAAQ,GAAR,QAAQ,CAAa;QAAU,mBAAc,GAAd,cAAc,CAAgB;QAAU,kBAAa,GAAb,aAAa,CAAgB;IAAI,CAAC;IAE7H,wCAAQ,GAAR;IACA,CAAC;IAED,wCAAQ,GAAR,UAAS,IAAY;QACnB,EAAE,CAAC,CAAE,IAAI,CAAC,OAAQ,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC;QACT,CAAC;QAED,IAAM,MAAM,GAAY;YACtB,EAAE,EAAE,IAAI;YACR,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY;YACrC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU;YACjC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK;YACvB,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW;YAC1B,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ;YAC7B,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;YACrB,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ;SAC9B,CAAC;QAEF,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAErC,IAAI,CAAC,SAAS,EAAE,CAAC;QAEjB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,EAAE,OAAO,EAAE;YAC1C,QAAQ,EAAE,IAAI;SACf,CAAC,CAAC;IACL,CAAC;IA9BU,qBAAqB;QALjC,+DAAS,CAAC;YACT,QAAQ,EAAE,mBAAmB;;;SAG9B,CAAC;yCAG8B,6DAAW,EAA0B,wEAAc,EAAyB,wEAAc;OAF7G,qBAAqB,CAgCjC;IAAD,4BAAC;CAAA;AAhCiC;;;;;;;;;;;;ACZlC,mB;;;;;;;;;;;ACAA,0D;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AAOlD;IAEE;IAAgB,CAAC;IAEjB,sCAAQ,GAAR;IACA,CAAC;IALU,mBAAmB;QAL/B,+DAAS,CAAC;YACT,QAAQ,EAAE,iBAAiB;;;SAG5B,CAAC;;OACW,mBAAmB,CAO/B;IAAD,0BAAC;CAAA;AAP+B;;;;;;;;;;;;ACPhC,8BAA8B,2BAA2B,0BAA0B,wBAAwB,yBAAyB,KAAK,WAAW,mBAAmB,oBAAoB,KAAK,iCAAiC,sBAAsB,KAAK,aAAa,kBAAkB,KAAK,WAAW,wBAAwB,yBAAyB,kBAAkB,KAAK,K;;;;;;;;;;;ACAnX,idAAid,qBAAqB,6DAA6D,cAAc,+DAA+D,eAAe,sLAAsL,+BAA+B,yCAAyC,+BAA+B,oCAAoC,gBAAgB,sCAAsC,gBAAgB,8CAA8C,qBAAqB,yjBAAyjB,GAAG,2eAA2e,GAAG,yLAAyL,6lBAA6lB,sBAAsB,4TAA4T,oBAAoB,oPAAoP,YAAY,gPAAgP,eAAe,sPAAsP,kBAAkB,8OAA8O,cAAc,sPAAsP,kBAAkB,qLAAqL,2BAA2B,kYAAkY,kBAAkB,0CAA0C,sBAAsB,2CAA2C,uBAAuB,kDAAkD,8BAA8B,mDAAmD,+BAA+B,wCAAwC,qBAAqB,2I;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACC13K;AACjC;AAC+D;AAClD;AAGQ;AAQzD;IAqBE,4BAAoB,KAAqB,EAAU,cAA8B,EAAU,SAAuB;QAA9F,UAAK,GAAL,KAAK,CAAgB;QAAU,mBAAc,GAAd,cAAc,CAAgB;QAAU,cAAS,GAAT,SAAS,CAAc;QAhBlH,UAAK,GAAG,EAAE,CAAC;QAEX,SAAI,GAAU,EAAE,CAAC;QAEjB,qBAAgB,GAAa,CAAC,UAAU,EAAE,YAAY,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;QAM9F,oBAAe,GAAG,KAAK,CAAC;IAM8F,CAAC;IAEvH,qCAAQ,GAAR;QAAA,iBAuBC;QArBC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;QAC7B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,0DAAG,CAAC,gBAAM,IAAI,aAAM,CAAC,IAAI,CAAC,EAAZ,CAAY,CAAC,CAAC,CAAC,SAAS,CAAC,UAAC,EAAE;YAC/D,KAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACf,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEzC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,yBAAyB,EAAE,CAAC,SAAS,CAAC,UAAC,CAAC;YAC5E,KAAI,CAAC,OAAO,GAAG,CAAC,CAAC;YACjB,OAAO,CAAC,GAAG,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;YAE1B,2BAA2B;YAC3B,0DAA0D;YAC1D;;iBAEK;YACL,KAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAG9B,CAAC,CAAC,CAAC;IAEL,CAAC;IAED,wCAAW,GAAX;QACE,6EAA6E;QAC7E,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC;QAC9B,8BAA8B;IAChC,CAAC;IAED,4CAAe,GAAf;IAEA,CAAC;IAED,+FAA+F;IAC/F,6CAAgB,GAAhB;QACE,IAAM,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC;QACjD,IAAM,QAAQ,GAAG,qDAAmD,CAAC,SAAM,CAAC;QAE5E,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,wBAAwB,CAAC,wBAAwB,GAAG,QAAQ,GAAG,2BAA2B,CAAC,CAAC;IACpH,CAAC;IA/CmB;QAAnB,+DAAS,CAAC,OAAO,CAAC;;wDAAU;IAjBlB,kBAAkB;QAL9B,+DAAS,CAAC;YACT,QAAQ,EAAE,eAAe;;;SAG1B,CAAC;yCAsB2B,8DAAc,EAA0B,wEAAc,EAAqB,sEAAY;OArBvG,kBAAkB,CAiE9B;IAAD,yBAAC;CAAA;AAjE8B;;;;;;;;;;;;ACf/B,8BAA8B,kCAAkC,kBAAkB,KAAK,oBAAoB,kBAAkB,KAAK,iBAAiB,iBAAiB,KAAK,WAAW,2BAA2B,kBAAkB,KAAK,S;;;;;;;;;;;ACAtO,4zBAA4zB,eAAe,wqBAAwqB,cAAc,yiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACE/7C;AACa;AAEb;AAEiB;AACP;AAQ5E;IAEE,gCAAoB,cAA8B,EAAU,aAA6B,EAAU,QAAqB;QAApG,mBAAc,GAAd,cAAc,CAAgB;QAAU,kBAAa,GAAb,aAAa,CAAgB;QAAU,aAAQ,GAAR,QAAQ,CAAa;QAOhH,oBAAe,GAAc,EAAE,CAAC;QAcxC,qBAAgB,GAAG,KAAK,CAAC;QAIzB,kBAAa,GAAgB,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC,CAAC;QAEtE,kBAAa,GAAgB,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC,CAAC;QAEtE,qBAAgB,GAAc,IAAI,wDAAS,CAAC;YAC1C,aAAa,EAAE,IAAI,CAAC,aAAa,EAAE,aAAa,EAAE,IAAI,CAAC,aAAa;SACrE,CAAC,CAAC;IA/ByH,CAAC;IAkC7H,yCAAQ,GAAR;QAAA,iBAqCC;QApCC,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE,CAAC;QACxC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,+BAA+B,EAAE;aACjC,SAAS,CAAC,UAAC,OAA0D;YACpE,KAAI,CAAC,aAAa,GAAG,OAAO,CAAC;QAC/B,CAAC,CAAC,CAAC;QACzC,IAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE,CAAC;QAEtC,6GAA6G;QAC7G,oBAAoB;QACpB,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,aAAa,CAAC,6BAA6B,EAAE,CAAC,SAAS,CAAC,UAAC,OAAO;YACjG,KAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,4DAA4D;QAC5D;;;;;;;WAOG;QACH,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,aAAa,CAAC,qBAAqB,EAAE,CAAC,SAAS,CAAC,UAAC,OAAO;YACxF,KAAI,CAAC,eAAe,GAAG,OAAO,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,4FAA4F;QAC5F,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,iCAAiC,EAAE,CAAC,SAAS,CAAC,UAAC,KAAK;YAC1F,OAAO,CAAC,GAAG,CAAC,yBAAyB,GAAG,KAAK,CAAC,CAAC;YAC/C,KAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,wBAAwB,EAAE,CAAC,SAAS,CAAC,UAAC,KAAK;YAC9E,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACvB,CAAC,CAAC,CAAC;IAEL,CAAC;IAED,4CAAW,GAAX;QACE,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC;QAC/B,IAAI,CAAC,sBAAsB,CAAC,WAAW,EAAE,CAAC;QAC1C,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,CAAC;QACzC,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;QACjC,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC;IAChC,CAAC;IAED,yCAAQ,GAAR,UAAS,OAAO;QACd,qDAAqD;QACrD,IAAI,CAAC;YACH,EAAE,CAAC,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC;gBAC1B,MAAM,OAAO,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;YACvD,CAAC;YACD,+EAA+E;YAC/E,IAAI,CAAC,cAAc,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;YACtD,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC;YAE/B,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAEhE,CAAC;QAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACb,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACnB,CAAC;IACH,CAAC;IAED,+CAAc,GAAd,UAAe,MAAM;QACnB,IAAI,CAAC;YACH,EAAE,CAAC,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC;gBACzB,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;YACzC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,0BAA0B;gBAC1B,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBACpB,EAAE,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC;oBACtB,2CAA2C;oBAC3C,4DAA4D;oBAC5D,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;oBACnD,oDAAoD;oBACpD,IAAI,CAAC,aAAa,CAAC,2BAA2B,CAAC,MAAM,CAAC,CAAC;gBACzD,CAAC;YACH,CAAC;QACH,CAAC;QAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAEf,CAAC;IACH,CAAC;IAED,2CAAU,GAAV,UAAW,IAAY;QACrB,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QACpD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACtD,MAAM,CAAC;QACT,CAAC;QAED,IAAM,SAAS,GAAa,EAAE,CAAC;QAC/B,IAAI,CAAC,eAAe,CAAC,OAAO,CAAE,WAAC;YAC7B,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;QAIH,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAC3B,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;YAC9B,IAAM,OAAO,GAAG;gBACd,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,EAAE;gBAClC,OAAO,EAAE,SAAS;aACnB,CAAC;YAEF,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACzC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;YAChC,IAAM,aAAa,GAAG;gBACpB,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,EAAE;gBACnB,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,EAAE;gBAClC,OAAO,EAAE,SAAS;aACnB,CAAC;YAEF,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;YAE3B,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;QAClD,CAAC;QAED,IAAI,CAAC,SAAS,EAAE,CAAC;QAEjB,IAAI,CAAC,aAAa,CAAC,+BAA+B,EAAE,CAAC;QAErD,IAAI,CAAC,aAAa,CAAC,yBAAyB,EAAE,CAAC;QAE/C,kEAAkE;QAClE,IAAI,CAAC,cAAc,CAAC,wBAAwB,CAAC,EAAC,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAC,CAAC,CAAC;QAEtF,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,EAAE,OAAO,EAAE;YAC3C,QAAQ,EAAE,IAAI;SACf,CAAC,CAAC;IACL,CAAC;IAtKU,sBAAsB;QALlC,+DAAS,CAAC;YACT,QAAQ,EAAE,oBAAoB;;;SAG/B,CAAC;yCAGoC,wEAAc,EAAyB,wEAAc,EAAoB,6DAAW;OAF7G,sBAAsB,CAuKlC;IAAD,6BAAC;CAAA;AAvKkC;;;;;;;;;;;;AChBnC,wBAAwB,kBAAkB,KAAK,gBAAgB,sBAAsB,0BAA0B,wBAAwB,yBAAyB,KAAK,K;;;;;;;;;;;ACArK,oHAAoH,qBAAqB,uZAAuZ,sBAAsB,sPAAsP,oBAAoB,4LAA4L,YAAY,wLAAwL,eAAe,8LAA8L,kBAAkB,sLAAsL,cAAc,8LAA8L,kBAAkB,ydAAyd,2BAA2B,qC;;;;;;;;;;;;;;;;;;;;;;;;;;ACAruE;AAGA;AAEL;AAO7D;IAEE,8BAAoB,cAA8B,EAAU,aAA6B;QAArE,mBAAc,GAAd,cAAc,CAAgB;QAAU,kBAAa,GAAb,aAAa,CAAgB;QACzF,SAAI,GAAc,EAAE,CAAC;QAEb,wBAAmB,GAAc,EAAE,CAAC;QAEpC,qBAAgB,GAAG,KAAK,CAAC;QAWjC,wBAAmB,GAAG,EAAE,CAAC;QAIzB,oBAAe,GAAG,KAAK,CAAC;QAExB,qBAAgB,GAAa,CAAC,UAAU,EAAE,YAAY,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;IAtBZ,CAAC;IAuB9F,uCAAQ,GAAR;QAAA,iBAwEC;QAtEC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC5B,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;QAC9B,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,cAAc,CAAC,kBAAkB,EAAE,CAAC,SAAS,CAAC,UAAC,eAAe;YAI5F,KAAI,CAAC,eAAe,GAAG,eAAe,CAAC;YACvC,KAAI,CAAC,mBAAmB,GAAG,KAAI,CAAC,eAAe,CAAC,WAAW,CAAC;YAE5D,iEAAiE;YACjE,kBAAkB;YAClB,gEAAgE;YAChE,wEAAwE;YACxE,uEAAuE;YAEvE,EAAE,CAAC,CAAE,KAAI,CAAC,eAAe,CAAC,WAAW,KAAK,EAAE,CAAC,CAAC,CAAC;gBAC7C,KAAI,CAAC,eAAe,GAAG,IAAI,CAAC;YAC9B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,KAAI,CAAC,eAAe,GAAG,KAAK,CAAC;YAC/B,CAAC;YAED,KAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAEpB,KAAI,CAAC,IAAI,GAAO,KAAI,CAAC,IAAI,QAAC,CAAC;QAE7B,CAAC,CAAC,CAAC;QAEH,4EAA4E;QAC5E,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,EAAE,CAAC,SAAS,CAAE,UAAC,cAAc;YAE3F,EAAE,CAAC,CAAE,KAAI,CAAC,mBAAmB,CAAC,MAAM,KAAK,CAAE,CAAC,CAAC,CAAC;gBAE5C,KAAI,CAAC,IAAI,GAAG,KAAI,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;YAC/C,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,KAAI,CAAC,IAAI,GAAG,KAAI,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;YAC/C,CAAC;YACD,OAAO,CAAC,GAAG,CAAC,KAAI,CAAC,IAAI,CAAC,CAAC;QAEzB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,wBAAwB,EAAE,CAAC,SAAS,CAAC,UAAC,KAAK;YAE/E,KAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC,OAAO,CAAC;YAEzC,EAAE,CAAC,CAAC,KAAI,CAAC,mBAAmB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACxC,KAAI,CAAC,IAAI,GAAG,KAAI,CAAC,mBAAmB,CAAC;gBAErC,KAAI,CAAC,aAAa,CAAC,4BAA4B,CAAC,KAAI,CAAC,mBAAmB,CAAC,CAAC;gBAC1E,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;YAE7B,CAAC;QAEH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,iCAAiC,EAAE,CAAC,SAAS,CAAC,UAAC,KAAK;YACzF,EAAE,CAAC,CAAC,CAAC,KAAM,CAAC,CAAC,CAAC;gBACZ,KAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACpB,KAAI,CAAC,IAAI,GAAO,KAAI,CAAC,IAAI,QAAC,CAAC;YAC7B,CAAC;YAED,KAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC9B,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4BAA4B,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,CAAC,SAAS,CAAC,UAAC,KAAK;YAEtF,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,KAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACpB,KAAI,CAAC,IAAI,GAAO,KAAI,CAAC,IAAI,QAAC,CAAC;YAC7B,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAGD,2CAAY,GAAZ,UAAa,cAAuB;QAElC,OAAO,CAAC,GAAG,CAAC,mBAAmB,GAAG,cAAc,CAAC,UAAU,CAAC,CAAC;QAC7D,mCAAmC;QACnC,2FAA2F;QAC3F,wCAAwC;QACxC,IAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,UAAC,CAAC,IAAM,QAAC,CAAC,UAAU,KAAK,cAAc,CAAC,UAAU,EAA1C,CAA0C,CAAE,CAAC;QACvF,OAAO,CAAC,GAAG,CAAC,sBAAsB,GAAG,KAAK,CAAC,CAAC;QAE5C,EAAE,CAAC,CAAC,KAAK,KAAK,CAAE,CAAC,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAC3B,gGAAgG;YAChG,IAAI,CAAC,IAAI,GAAO,IAAI,CAAC,IAAI,QAAC,CAAC;YAC3B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACvB,IAAI,CAAC,aAAa,CAAC,4BAA4B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7D,CAAC;IACH,CAAC;IAED,0CAAW,GAAX;QACE,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,CAAC;QACvC,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,CAAC;QACvC,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC;QAC/B,IAAI,CAAC,4BAA4B,CAAC,WAAW,EAAE,CAAC;QAChD,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;IAClC,CAAC;IA5HU,oBAAoB;QALhC,+DAAS,CAAC;YACT,QAAQ,EAAE,kBAAkB;;;SAG7B,CAAC;yCAGoC,wEAAc,EAAyB,wEAAc;OAF9E,oBAAoB,CA6HhC;IAAD,2BAAC;CAAA;AA7HgC;;;;;;;;;;;;ACZjC,+BAA+B,kCAAkC,KAAK,wBAAwB,kBAAkB,yBAAyB,KAAK,iBAAiB,qBAAqB,KAAK,oBAAoB,qBAAqB,mBAAmB,iBAAiB,KAAK,K;;;;;;;;;;;ACA3Q,ooCAAooC,GAAG,0wBAA0wB,GAAG,sdAAsd,GAAG,k+C;;;;;;;;;;;;;;;;;;;;;;;;;;ACA3yE;AAMhB;AAEF;AAOhD;IAEE,gCAAoB,cAA8B,EAAU,QAAqB;QAA7D,mBAAc,GAAd,cAAc,CAAgB;QAAU,aAAQ,GAAR,QAAQ,CAAa;QAEjF,uBAAkB,GAAa,EAAE,CAAC;QAElC,wBAAmB,GAAa,EAAE,CAAC;QAEnC,uBAAkB,GAAa,EAAE,CAAC;QAElC,kBAAa,GAAa,EAAE,CAAC;QAE7B,kBAAa,GAAG,CAAC,CAAC;QAElB,uBAAkB,GAAG,CAAC,CAAC;IAZ8D,CAAC;IActF,yCAAQ,GAAR;QACE,IAAI,CAAC,kBAAkB,GAAG;YACxB,MAAM;YACN,OAAO;YACP,OAAO;YACP,KAAK;YACL,QAAQ;YACR,KAAK;YACL,UAAU;YACV,QAAQ;YACR,OAAO;YACP,QAAQ;YACR,QAAQ;YACR,QAAQ;YACR,SAAS;YACT,MAAM;YACN,UAAU;SACX,CAAC;IACJ,CAAC;IAED,6CAAY,GAAZ,UAAa,IAAY;QACvB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC;QACT,CAAC;QAED,IAAM,UAAU,GAAgB;YAC9B,EAAE,EAAE,IAAI;YACR,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;YACrB,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;YAC5B,WAAW,EAAE,IAAI,CAAC,mBAAmB;SACtC,CAAC;QAEF,IAAM,UAAU,GAAe;YAC7B,EAAE,EAAE,IAAI;YACR,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;YACrB,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa;SACtC,CAAC;QAEF,IAAM,QAAQ,GAAe;YAC3B,EAAE,EAAE,IAAI;YACR,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;YACrB,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;YAC5B,UAAU,EAAE,IAAI,CAAC,kBAAkB;SACpC,CAAC;QAEF,IAAM,OAAO,GAAc;YACzB,EAAE,EAAE,IAAI;YACR,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;YACrB,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO;SAChC,CAAC;QAEF,IAAM,OAAO,GAAY;YACvB,EAAE,EAAE,IAAI;YACR,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;YAC5B,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;YACrB,KAAK,EAAE,IAAI,CAAC,aAAa;YACzB,WAAW,EAAE,UAAU;YACvB,SAAS,EAAE,UAAU;YACrB,UAAU,EAAE,QAAQ;YACpB,SAAS,EAAE,OAAO;YAClB,OAAO,EAAE,IAAI;YACb,KAAK,EAAE,IAAI;YACX,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM;YACzB,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM;YACzB,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW;SACpC,CAAC;QAEF,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACxC,IAAI,CAAC,SAAS,EAAE,CAAC;QAEjB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,EAAE,OAAO,EAAE;YAC3C,QAAQ,EAAE,IAAI;SACf,CAAC,CAAC;IACL,CAAC;IAED,yDAAwB,GAAxB,UAAyB,KAAY;QAGnC,IAAI,CAAC,kBAAkB,GAAO,KAAK,QAAC,CAAC;QAErC;yDACiD;QACjD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IACvC,CAAC;IAED,0DAAyB,GAAzB,UAA0B,KAAY;QAEpC,IAAI,CAAC,mBAAmB,GAAO,KAAK,QAAC,CAAC;QAEtC;yDACiD;QACjD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;IACxC,CAAC;IAED,oDAAmB,GAAnB,UAAoB,KAAY;QAE9B,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC,MAAM,CAAC;QAEvC,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACjD,KAAK,CAAC,qCAAqC,CAAC,CAAC;QAC/C,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,aAAa,GAAO,KAAK,QAAC,CAAC;QAClC,CAAC;QAGD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAElC,CAAC;IA3HU,sBAAsB;QALlC,+DAAS,CAAC;YACT,QAAQ,EAAE,oBAAoB;;;SAG/B,CAAC;yCAGoC,wEAAc,EAAoB,6DAAW;OAFtE,sBAAsB,CA6HjC;IAAD,6BAAC;CAAA;AA7HiC;;;;;;;;;;;;ACfnC,sBAAsB,wBAAwB,2BAA2B,KAAK,QAAQ,iBAAiB,mBAAmB,4BAA4B,KAAK,OAAO,4BAA4B,yBAAyB,0BAA0B,yBAAyB,sBAAsB,KAAK,WAAW,gCAAgC,kCAAkC,KAAK,SAAS,qBAAqB,wBAAwB,yBAAyB,KAAK,MAAM,yBAAyB,oBAAoB,uBAAuB,KAAK,OAAO,qBAAqB,KAAK,mBAAmB,8BAA8B,kBAAkB,KAAK,gBAAgB,uBAAuB,0BAA0B,wBAAwB,yBAAyB,KAAK,YAAY,4BAA4B,0BAA0B,wBAAwB,yBAAyB,sBAAsB,KAAK,qBAAqB,iBAAiB,oBAAoB,0BAA0B,mBAAmB,KAAK,cAAc,yBAAyB,KAAK,K;;;;;;;;;;;ACAhiC,+hBAA+hB,iBAAiB,YAAY,QAAQ,6DAA6D,2DAA2D,eAAe,gNAAgN,GAAG,wJ;;;;;;;;;;;;;;;;;;;;;;;;;;ACAr2B;AAGS;AAEL;AAQ7D;IAEE,8BAAoB,cAA8B,EAAU,SAAuB;QAA/D,mBAAc,GAAd,cAAc,CAAgB;QAAU,cAAS,GAAT,SAAS,CAAc;QAI3E,WAAM,GAAG;YACf,KAAK,EAAE,SAAS;YAChB,IAAI,EAAE,QAAQ;YACd,KAAK,EAAE,MAAM;YACb,QAAQ,EAAE,MAAM;YAChB,MAAM,EAAE,SAAS;YACjB,MAAM,EAAE,OAAO;YACf,MAAM,EAAE,QAAQ;YAChB,OAAO,EAAE,UAAU;YACnB,IAAI,EAAE,SAAS;YACf,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,UAAU;YACf,MAAM,EAAE,SAAS;YACjB,QAAQ,EAAE,WAAW;YACrB,GAAG,EAAE,YAAY;YACjB,KAAK,EAAE,cAAc;SACtB,CAAC;QACF,gBAAW,GAAqE,EAAE,CAAC;QAEnF;;WAEG;QACH,aAAQ,GAAc,EAAE,CAAC,CAAC,mBAAmB;QAC7C,iBAAY,GAAG,EAAE,CAAC,CAAC,gCAAgC;QAEnD,qBAAgB,GAAa,CAAC,MAAM,EAAE,KAAK,EAAE,aAAa,EAAE,MAAM,CAAC,CAAC;QAEpE;;WAEG;QAEH,eAAU,GAA4F,EAAE,CAAC;QAEzG,oBAAe,GAAG,KAAK,CAAC;IArC+D,CAAC;IAuCxF,uCAAQ,GAAR;QAAA,iBAWC;QATC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;QAC7B,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC;QACjC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,gCAAgC,EAAE,CAAC,SAAS,CAAC,UAAC,OAAO;YAC3F,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACrB,KAAI,CAAC,WAAW,GAAG,OAAO,CAAC;YAC3B,KAAI,CAAC,eAAe,GAAG,IAAI,CAAC;YAC5B,oDAAoD;QACtD,CAAC,CAAC,CAAC;IAEL,CAAC;IAED,0CAAW,GAAX;QACE,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;IAClC,CAAC;IAED,0CAAW,GAAX,UAAY,KAAa;QAEvB;;;WAGG;QACH,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;IAC1C,CAAC;IAED,+DAA+D;IAC/D,uCAAQ,GAAR,UAAS,CAAC;QACR,IAAM,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;QAC1B,IAAM,QAAQ,GAAG,qDAAmD,CAAC,SAAM,CAAC;QAE5E,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;IACzD,CAAC;IA1EU,oBAAoB;QALhC,+DAAS,CAAC;YACT,QAAQ,EAAE,kBAAkB;;;SAG7B,CAAC;yCAGoC,wEAAc,EAAqB,sEAAY;OAFxE,oBAAoB,CA4EhC;IAAD,2BAAC;CAAA;AA5EgC;;;;;;;;;;;;ACbjC,iCAAiC,kBAAkB,KAAK,K;;;;;;;;;;;ACAxD,oVAAoV,eAAe,k5D;;;;;;;;;;;;;;;;;;;;;;;;;;ACEjS;AACL;AAEC;AAO9D;IAEE,8BAAoB,cAA8B,EAAU,YAA0B;QAAlE,mBAAc,GAAd,cAAc,CAAgB;QAAU,iBAAY,GAAZ,YAAY,CAAc;QAEtF,mBAAc,GAAsD,EAAE,CAAC;QAIvE,oBAAe,GAAoD,SAAS,CAAC;IANa,CAAC;IAO3F,uCAAQ,GAAR;QAAA,iBAUC;QARC,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE,CAAC;QAExC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,cAAc,CAAC,+BAA+B,EAAE;aACjC,SAAS,CAAC,UAAC,OAAO;YACN,KAAI,CAAC,cAAc,GAAG,OAAO,CAAC;YAC9B,OAAO,CAAC,GAAG,CAAC,KAAI,CAAC,cAAc,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;IAE3D,CAAC;IAED,0CAAW,GAAX;QACE,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC;IACtC,CAAC;IAED,oDAAqB,GAArB,UAAsB,OAAY;QAChC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAErB,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC;IACjC,CAAC;IAED,6CAAc,GAAd,UAAe,IAAY;QACzB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC;QACT,CAAC;QAED,IAAM,KAAK,GAAU;YACnB,EAAE,EAAE,IAAI;YACR,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE;YACjB,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM;YACzB,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO;YAC3B,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,cAAc;YACzC,eAAe,EAAE,IAAI,CAAC,KAAK,CAAC,eAAe;YAC3C,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK;SACxB,CAAC;QAEF,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;QAEvD,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IAjDU,oBAAoB;QALhC,+DAAS,CAAC;YACT,QAAQ,EAAE,kBAAkB;;;SAG7B,CAAC;yCAGoC,wEAAc,EAAwB,2EAAY;OAF3E,oBAAoB,CAmDhC;IAAD,2BAAC;CAAA;AAnDgC;;;;;;;;;;;;ACZjC,8BAA8B,kCAAkC,mBAAmB,mCAAmC,yBAAyB,uBAAuB,KAAK,kCAAkC,kBAAkB,KAAK,YAAY,yBAAyB,KAAK,K;;;;;;;;;;;ACA9Q,4iC;;;;;;;;;;;;;;;;;;;;;;;;;ACA8D;AAEU;AAQxE;IAEE,6BAAmB,WAAyB;QAAzB,gBAAW,GAAX,WAAW,CAAc;QAE5C,mBAAc,GAAG,EAAE,CAAC;QACpB,iBAAY,GAAG,EAAE,CAAC;IAH8B,CAAC;IAOjD,sCAAQ,GAAR;IACA,CAAC;IAED,uCAAS,GAAT,UAAU,IAAY;QACpB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC;QACT,CAAC;QAED,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAC/D,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IAnBU,mBAAmB;QAL/B,+DAAS,CAAC;YACT,QAAQ,EAAE,iBAAiB;;;SAG5B,CAAC;yCAGgC,oEAAY;OAFjC,mBAAmB,CAqB/B;IAAD,0BAAC;CAAA;AArB+B;;;;;;;;;;;;ACVhC,yBAAyB,qBAAqB,uBAAuB,KAAK,oBAAoB,yBAAyB,KAAK,oBAAoB,kCAAkC,mBAAmB,mCAAmC,yBAAyB,KAAK,K;;;;;;;;;;;ACAtQ,+MAA+M,SAAS,kDAAkD,WAAW,0V;;;;;;;;;;;;;;;;;;;;;;;;;ACCjN;AACN;AAQ9D;IAEE,2BAAY,WAAyB;QAIrC;;;YAGI;QACJ,UAAK,GAAW,EAAE,CAAC;QAPjB,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IAClC,CAAC;IAUD,oCAAQ,GAAR;QAAA,iBAMC;QALC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;QAC7B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,qBAAqB,EAAE;aACtC,SAAS,CAAC,UAAC,KAAa;YACvB,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACrB,CAAC,CAAC,CAAC;IACvB,CAAC;IAED,oCAAQ,GAAR,UAAS,MAAc;QACrB,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IACvC,CAAC;IAED,uCAAW,GAAX;QACE,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;IAC9B,CAAC;IA5BU,iBAAiB;QAL7B,+DAAS,CAAC;YACT,QAAQ,EAAE,eAAe;;;SAG1B,CAAC;yCAGyB,2EAAY;OAF1B,iBAAiB,CA8B7B;IAAD,wBAAC;CAAA;AA9B6B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACV6D;AACG;AACN;AACM;AACrD;AAGY;AAC2C;AACV;AAEtF,IAAM,MAAM,GAAW;IACrB,EAAC,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,uGAAsB,EAAC;IAC7C,EAAC,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,iGAAoB,EAAC;IAC/C,EAAC,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,uGAAsB,EAAC;IACpD,EAAC,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,oGAAqB,EAAC;IAClD,EAAC,IAAI,EAAE,aAAa,EAAE,SAAS,EAAE,2GAAkB,EAAC;IACpD,EAAC,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,iGAAoB,EAAC;CACpD,CAAC;AASF;IAAA;IAA6B,CAAC;IAAjB,aAAa;QAPzB,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC;aAC7B;YACD,OAAO,EAAE,CAAC,4DAAY,CAAC;YACvB,YAAY,EAAE,EAAE;SACjB,CAAC;OACW,aAAa,CAAI;IAAD,oBAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3BqC;AAE1B;AACW;AAEE;AACP;AAM3C;IAyBE,wBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAvBpC,yEAAyE;QACjE,eAAU,GAAc,EAAE,CAAC;QACnC,iGAAiG;QACzF,0BAAqB,GAAG,IAAI,4CAAO,EAAa,CAAC;QAEzD,iEAAiE;QACzD,oBAAe,GAAc,EAAE,CAAC;QACxC,mEAAmE;QAC3D,uBAAkB,GAAG,IAAI,4CAAO,EAAW,CAAC;QACpD,oEAAoE;QAC5D,uBAAkB,GAAG,IAAI,4CAAO,EAAa,CAAC;QAKtD,qDAAqD;QAC7C,uBAAkB,GAAG,IAAI,oDAAe,CAAU,KAAK,CAAC,CAAC;QAEjE,iDAAiD;QACzC,oBAAe,GAAG,IAAI,4CAAO,EAAW,CAAC;QAEzC,yBAAoB,GAAG,IAAI,4CAAO,EAAW,CAAC;IAEd,CAAC;IAEzC,kCAAS,GAAT,UAAU,CAAU;QAApB,iBAaC;QAZC,IAAM,GAAG,GAAG,qEAAW,CAAC,MAAM,GAAG,aAAa,CAAC;QAE/C,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;QAE1B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAwC,GAAG,EAAE,CAAC,CAAC;aAC1D,SAAS,CAAC,UAAC,YAAY;YACtB,IAAM,EAAE,GAAG,YAAY,CAAC,QAAQ,CAAC;YACjC,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC;YACV,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACxB,KAAI,CAAC,qBAAqB,CAAC,IAAI,CAAK,KAAI,CAAC,UAAU,SAAE,CAAC;QACxD,CAAC,CAAC,CAAC;IAEP,CAAC;IAED,iCAAiC;IACjC,oCAAoC;IACpC,mCAAU,GAAV,UAAW,OAA+C;QACxD,IAAM,GAAG,GAAG,qEAAW,CAAC,MAAM,GAAG,aAAa,CAAC;QAE/C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAsB,GAAG,EAAE,OAAO,CAAC,CAAC,SAAS,EAAE,CAAC;IAChE,CAAC;IAED,mCAAU,GAAV,UAAW,eAAgE;QACzE,IAAM,GAAG,GAAG,0CAAwC,eAAe,CAAC,EAAI,CAAC;IAC3E,CAAC;IAED,sCAAa,GAAb,UAAc,CAAqD;QACjE,IAAM,GAAG,GAAG,qEAAW,CAAC,MAAM,GAAG,gBAAgB,CAAC;QAClD,IAAM,QAAQ,GAAG,CAAC,CAAC;QACnB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAoB,GAAG,EAAE,QAAQ,CAAC,CAAC,SAAS,EAAE,CAAC;IAE9D,CAAC;IAED,6CAAoB,GAApB,UAAqB,eAAkE;QAAvF,iBAcC;QAbC,IAAM,GAAG,GAAG,qEAAW,CAAC,MAAM,IAAG,yBAAuB,eAAe,CAAC,EAAE,SAAI,eAAe,CAAC,IAAI,SAAI,eAAe,CAAC,WAAa,EAAC;QAEpI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAyD,GAAG,CAAC;aAC9E,SAAS,CAAC,UAAC,QAAQ;YAClB,kDAAkD;YAClD,KAAI,CAAC,cAAc,GAAG,QAAQ,CAAC,MAAM,CAAC;YACtC,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAI,CAAC,cAAc,CAAC,CAAC;YAElD,EAAE,CAAC,CAAC,KAAI,CAAC,cAAc,CAAC,CAAC,CAAC;gBACxB,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;gBAC9B,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAC9C,CAAC;QACH,CAAC,CAAC,CAAC;IACP,CAAC;IAGD,yCAAgB,GAAhB;QAAA,iBAsBC;QArBC,IAAM,GAAG,GAAG,qEAAW,CAAC,MAAM,GAAG,mBAAmB,CAAC;QAErD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAsC,GAAG,CAAC;aAC3D,IAAI,CAAC,0DAAG,CAAC,UAAC,UAAU;YACnB,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,WAAC;gBAC7B,MAAM,CAAC;oBACL,EAAE,EAAE,CAAC,CAAC,GAAG;oBACT,YAAY,EAAE,CAAC,CAAC,YAAY;oBAC5B,UAAU,EAAE,CAAC,CAAC,UAAU;oBACxB,EAAE,EAAE,CAAC,CAAC,EAAE;oBACR,KAAK,EAAE,CAAC,CAAC,KAAK;oBACd,QAAQ,EAAE,CAAC,CAAC,QAAQ;oBACpB,IAAI,EAAE,CAAC,CAAC,IAAI;oBACZ,QAAQ,EAAE,CAAC,CAAC,QAAQ;iBACrB,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;aACF,SAAS,CAAC,UAAC,gBAAgB;YAC1B,KAAI,CAAC,UAAU,GAAG,gBAAgB,CAAC;YACnC,KAAI,CAAC,qBAAqB,CAAC,IAAI,CAAK,KAAI,CAAC,UAAU,SAAE,CAAC;QACxD,CAAC,CAAC,CAAC;IACP,CAAC;IAED,sDAA6B,GAA7B;QACE,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,YAAY,EAAE,CAAC;IACnD,CAAC;IAED,sFAAsF;IACtF,gDAAuB,GAAvB,UAAwB,OAAgB;QACtC,sCAAsC;QACtC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;IAED,gEAAgE;IAChE,oDAA2B,GAA3B,UAA4B,OAAgB;QAC1C,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACnC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAK,IAAI,CAAC,eAAe,SAAE,CAAC;IAC1D,CAAC;IAED,qDAA4B,GAA5B,UAA6B,OAAkB;QAC7C,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC;QAC/B,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAK,IAAI,CAAC,eAAe,SAAE,CAAC;IAC1D,CAAC;IAED,+FAA+F;IAC/F,qDAA4B,GAA5B,UAA6B,MAAe;QAE1C,IAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,UAAC,CAAC,IAAK,QAAC,CAAC,UAAU,KAAK,MAAM,CAAC,UAAU,EAAlC,CAAkC,CAAE,CAAC;QACzF,OAAO,CAAC,GAAG,CAAC,oBAAoB,GAAG,KAAK,CAAC,CAAC;QAC1C,EAAE,CAAC,CAAE,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACxC,CAAC;QAED,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAK,IAAI,CAAC,eAAe,SAAE,CAAC;IAC1D,CAAC;IAED,iFAAiF;IACjF,wDAA+B,GAA/B;QAEE,sCAAsC;QACtC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAE/B,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAK,IAAI,CAAC,eAAe,SAAE,CAAC;IAC1D,CAAC;IAED,2CAAkB,GAAlB;QACE,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;IAChD,CAAC;IAED,8CAAqB,GAArB;QACE,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;IAChD,CAAC;IACD,+CAAsB,GAAtB,UAAuB,KAAc;QACnC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;IAGD,oDAAoD;IACpD,0DAAiC,GAAjC;QACE,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;IAChD,CAAC;IAED,+EAA+E;IAC/E,iDAAwB,GAAxB;QACE,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;IAC7C,CAAC;IAED,kDAAyB,GAAzB;QACE,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvC,CAAC;IAED,uCAAc,GAAd;QACE,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,YAAY,EAAE,CAAC;IAClD,CAAC;IA5KU,cAAc;QAH1B,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;yCA0B0B,+DAAU;OAzBzB,cAAc,CA6K1B;IAAD,qBAAC;CAAA;AA7K0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZoC;AAE1B;AAKM;AACO;AAEP;AAM3C;IAEE,wBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAI5B,0BAAqB,GAAG,IAAI,4CAAO,EAAqD,CAAC;QAIzF,mBAAc,GAAG,IAAI,4CAAO,EAAW,CAAC;QAExC,gBAAW,GAAc,EAAE,CAAC;QAC5B,uBAAkB,GAAG,IAAI,4CAAO,EAAa,CAAC;QAEtD,iEAAiE;QACzD,mBAAc,GAAsE,EAAE,CAAC;QACvF,0BAAqB,GAAG,IAAI,4CAAO,EAAoE,CAAC;QAGxG,wBAAmB,GAAG,IAAI,4CAAO,EAAmD,CAAC;IAlBrD,CAAC;IAoBzC,mCAAU,GAAV,UAAW,CAAU;QAArB,iBAUC;QATC,IAAM,GAAG,GAAG,qEAAW,CAAC,MAAM,GAAG,aAAa,CAAC;QAE/C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAuC,GAAG,EAAE,CAAC,CAAC;aAClD,SAAS,CAAE,UAAC,YAAY;YACvB,IAAM,EAAE,GAAG,YAAY,CAAC,SAAS,CAAC;YAClC,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC;YACV,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACzB,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAK,KAAI,CAAC,WAAW,SAAE,CAAC;QACtD,CAAC,CAAC,CAAC;IACd,CAAC;IAED,0CAAiB,GAAjB;QAAA,iBAoBC;QAnBC,IAAM,GAAG,GAAG,qEAAW,CAAC,MAAM,GAAG,oBAAoB,CAAC;QAEtD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAqC,GAAG,CAAC;aAC5C,IAAI,CAAC,0DAAG,CAAC,UAAC,WAAW;YACpB,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAE,WAAC;gBAChC,MAAM,CAAC;oBACL,EAAE,EAAE,CAAC,CAAC,GAAG;oBACT,IAAI,EAAE,CAAC,CAAC,IAAI;oBACZ,WAAW,EAAE,CAAC,CAAC,WAAW;iBAC3B,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;aACF,SAAS,CAAE,UAAC,kBAAkB;YAE7B,KAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC;YAEzC,oCAAoC;YACpC,KAAI,CAAC,qBAAqB,CAAC,IAAI,CAAK,KAAI,CAAC,cAAc,SAAE,CAAC;QAC5D,CAAC,CAAC,CAAC;IACrB,CAAC;IAED,8CAA8C;IAC9C,mCAAU,GAAV;QAAA,iBAsBC;QArBC,IAAM,GAAG,GAAG,qEAAW,CAAC,MAAM,GAAG,aAAa,CAAC;QAE/C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAqC,GAAG,CAAC;aAC5C,IAAI,CAAE,0DAAG,CAAE,UAAC,YAAY;YACvB,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAE,WAAC;gBAChC,MAAM,CAAC;oBACL,EAAE,EAAE,CAAC,CAAC,EAAE;oBACR,IAAI,EAAE,CAAC,CAAC,IAAI;oBACZ,WAAW,EAAE,CAAC,CAAC,WAAW;oBAC1B,KAAK,EAAE,CAAC,CAAC,KAAK;iBACf,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;aACF,SAAS,CAAC,UAAC,YAAY;YAEtB,KAAI,CAAC,cAAc,GAAG,YAAY,CAAC;YAEnC,KAAI,CAAC,qBAAqB,CAAC,IAAI,CAAK,KAAI,CAAC,cAAc,SAAE,CAAC;QAE5D,CAAC,CAAC,CAAC;IAErB,CAAC;IAED,oCAAW,GAAX,UAAY,EAAU;QAAtB,iBAOC;QANC,IAAM,GAAG,GAAG,qEAAW,CAAC,MAAM,IAAG,iBAAe,EAAI,EAAC;QAErD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAsC,GAAG,CAAC,CAAC,SAAS,CAAC,UAAC,WAAW;YACnF,KAAI,CAAC,gBAAgB,GAAG,WAAW,CAAC,OAAO,CAAC;YAC5C,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAI,CAAC,gBAAgB,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC;IAED,wDAA+B,GAA/B;QACE,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,YAAY,EAAE,CAAC;IACnD,CAAC;IAED,2CAA2C;IAC3C,iDAAwB,GAAxB,UAAyB,OAAwD;QAC/E,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACzC,CAAC;IAED,2EAA2E;IAC3E,2CAAkB,GAAlB;QACE,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,CAAC;IACjD,CAAC;IAED,gEAAgE;IAChE,yDAAgC,GAAhC;QACE,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,YAAY,EAAE,CAAC;IACnD,CAAC;IAED,kDAAyB,GAAzB;QACE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;IAC5C,CAAC;IA/GU,cAAc;QAH1B,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;yCAG0B,+DAAU;OAFzB,cAAc,CAiH1B;IAAD,qBAAC;CAAA;AAjH0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfgB;AACZ;AACmB;AACf;AAKnC;IAEE,sBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAE5B,UAAK,GAAW,EAAE,CAAC;QACnB,iBAAY,GAAG,IAAI,4CAAO,EAAU,CAAC;IAHL,CAAC;IAKzC,+BAAQ,GAAR;QAAA,iBAgBC;QAfC,IAAM,GAAG,GAAG,iCAAiC,CAAC;QAC9C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAmC,GAAG,CAAC;aAC1D,IAAI,CAAC,0DAAG,CAAE,UAAC,QAAQ;YAClB,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,cAAI;gBAC5B,MAAM,CAAC;oBACL,KAAK,EAAE,IAAI,CAAC,KAAK;oBACjB,OAAO,EAAE,IAAI,CAAC,OAAO;oBACrB,EAAE,EAAE,IAAI,CAAC,GAAG;iBACb,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;aACF,SAAS,CAAE,UAAC,gBAAgB;YAC3B,KAAI,CAAC,KAAK,GAAG,gBAAgB,CAAC;YAC9B,KAAI,CAAC,YAAY,CAAC,IAAI,CAAK,KAAI,CAAC,KAAK,SAAE,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC;IAED,8BAAO,GAAP,UAAQ,KAAa,EAAE,OAAe;QAAtC,iBAcC;QAbC,IAAM,GAAG,GAAG,iCAAiC,CAAC;QAC9C,IAAM,IAAI,GAAS;YACjB,EAAE,EAAE,IAAI;YACR,KAAK,EAAE,KAAK;YACZ,OAAO,EAAE,OAAO;SACjB,CAAC;QACF,IAAI,CAAC,IAAI,CAAC,IAAI,CAAoC,GAAG,EAAE,IAAI,CAAC;aAC7C,SAAS,CAAC,UAAC,YAAY;YACtB,IAAM,EAAE,GAAG,YAAY,CAAC,MAAM,CAAC;YAC/B,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;YACb,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtB,KAAI,CAAC,YAAY,CAAC,IAAI,CAAK,KAAI,CAAC,KAAK,SAAE,CAAC;QAC1C,CAAC,CAAC,CAAC;IACnB,CAAC;IAED,4CAAqB,GAArB;QACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;IAC1C,CAAC;IAED,iCAAU,GAAV,UAAW,MAAc;QAAzB,iBAOC;QANC,IAAM,GAAG,GAAG,kCAAkC,CAAC;QAC/C,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,MAAM,CAAC,CAAC,SAAS,CAAC;YACvC,IAAM,YAAY,GAAG,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,cAAI,IAAI,WAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,KAAK,MAAM,EAA7B,CAA6B,CAAC,CAAC;YAC9E,KAAI,CAAC,KAAK,GAAG,YAAY,CAAC;YAC1B,KAAI,CAAC,YAAY,CAAC,IAAI,CAAK,KAAI,CAAC,KAAK,SAAE,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC;IApDU,YAAY;QAHxB,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;yCAG0B,+DAAU;OAFzB,YAAY,CAqDxB;IAAD,mBAAC;CAAA;AArDwB;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTsC;AAEb;AACP;AAM3C;IAEE,sBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IAEzC,8BAAO,GAAP,UAAQ,OAAwD,EAAE,KAAY;QAC5E,IAAM,GAAG,GAAG,qEAAW,CAAC,MAAM,IAAG,eAAa,OAAO,CAAC,EAAI,EAAC;QAE3D,IAAI,CAAC,IAAI,CAAC,IAAI,CAAoB,GAAG,EAAE,KAAK,CAAC,CAAC,SAAS,CAAC,UAAC,QAAQ;YAC/D,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACL,CAAC;IAVU,YAAY;QAHxB,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;yCAG0B,+DAAU;OAFzB,YAAY,CAWxB;IAAD,mBAAC;CAAA;AAXwB;;;;;;;;;;;;;ACTzB;AAAA;AAAA,gFAAgF;AAChF,2EAA2E;AAC3E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;IACjB,MAAM,EAAE,2BAA2B;CACpC,CAAC;AAEF;;;;;GAKG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,EAAE,CAAC,CAAC,qEAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,oEAAc,EAAE,CAAC;AACnB,CAAC;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"main{\\r\\n  margin-top: 1rem;\\r\\n  width: 80%;\\r\\n  margin: 1rem auto;\\r\\n}\\r\\n\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\r\\n<app-header></app-header>\\r\\n<main>\\r\\n  <router-outlet></router-outlet>\\r\\n</main>\\r\\n\\r\\n\"","import { Post } from './models/post.models';\r\nimport { Component } from '@angular/core';\r\n\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'app';\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { AppComponent } from './app.component';\r\nimport { PostCreateComponent } from './posts/post-create/post-create.component';\r\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {MatInputModule, MatCardModule, MatButtonModule, MatToolbarModule, MatExpansionModule,\r\n        MatMenuModule, MatIconModule, MatSelectModule, MatSnackBarModule, MatTableModule,\r\n        MatProgressSpinnerModule} from '@angular/material';\r\nimport { HeaderComponent } from './header/header/header.component';\r\nimport { PostListComponent } from './posts/post-list/post-list.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { PokemonCreateComponent } from './pokemon/pokemon-create/pokemon-create.component';\r\nimport { PokemonListComponent } from './pokemon/pokemon-list/pokemon-list.component';\r\nimport { MovesetCreateComponent } from './pokemon/moveset-create/moveset-create.component';\r\nimport { MovesetListComponent } from './pokemon/moveset-list/moveset-list.component';\r\nimport { RoutingModule } from './routing/routing.module';\r\nimport { AttackCreateComponent } from './pokemon/attack-create/attack-create.component';\r\nimport { AttackListComponent } from './pokemon/attack-list/attack-list.component';\r\nimport { DashboardComponent } from './pokemon/display_dashboard/dashboard/dashboard.component';\r\nimport { StatsCreateComponent } from './pokemon/stats-create/stats-create.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    PostCreateComponent,\r\n    HeaderComponent,\r\n    PostListComponent,\r\n    PokemonCreateComponent,\r\n    PokemonListComponent,\r\n    MovesetCreateComponent,\r\n    MovesetListComponent,\r\n    AttackCreateComponent,\r\n    AttackListComponent,\r\n    DashboardComponent,\r\n    StatsCreateComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    RoutingModule,\r\n    FormsModule,\r\n    BrowserAnimationsModule,\r\n    MatInputModule,\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatToolbarModule,\r\n    MatExpansionModule,\r\n    MatMenuModule,\r\n    MatIconModule,\r\n    HttpClientModule,\r\n    MatSelectModule,\r\n    ReactiveFormsModule,\r\n    MatSnackBarModule,\r\n    MatTableModule,\r\n    MatProgressSpinnerModule\r\n\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","module.exports = \"#spacer {\\r\\n  flex: 1 1 auto;\\r\\n}\\r\\n\\r\\nimg {\\r\\n  height: 50%;\\r\\n}\\r\\n\"","module.exports = \"<mat-toolbar color=\\\"primary\\\">\\r\\n  <img src=\\\"assets/resources/pokeball.svg\\\">\\r\\n  <span>Pokemon DB</span>\\r\\n  <span id=\\\"spacer\\\"></span>\\r\\n  <mat-menu #appMenu=\\\"matMenu\\\">\\r\\n    <a routerLink=\\\"\\\"><button mat-menu-item> Create Pokemon</button></a>\\r\\n    <a routerLink=\\\"attack\\\"><button mat-menu-item>Add Attacks</button></a>\\r\\n    <a routerLink=\\\"moveset\\\"><button mat-menu-item >Add Movesets</button></a>\\r\\n    <a routerLink=\\\"addStats\\\"><button mat-menu-item>Add Stats</button></a>\\r\\n    <a routerLink=\\\"list\\\"><button mat-menu-item>Pokemon DB</button></a>\\r\\n  </mat-menu>\\r\\n  <button mat-icon-button [matMenuTriggerFor]=\\\"appMenu\\\">\\r\\n    <mat-icon>menu</mat-icon>\\r\\n  </button>\\r\\n\\r\\n</mat-toolbar>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.css']\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \".jumbotron{\\r\\n  background-color: aliceblue;\\r\\n}\\r\\nmat-form-field {\\r\\n  width: 100%;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"jumbotron\\\">\\r\\n  <h1 style=\\\"text-align: center\\\">Add an Attack</h1>\\r\\n  <form (submit)=\\\"onSubmit(attacksForm)\\\" #attacksForm=\\\"ngForm\\\">\\r\\n    <mat-card>\\r\\n      <mat-form-field>\\r\\n        <div class=\\\"input-group\\\">\\r\\n          <input matInput type=\\\"number\\\" ngModel name=\\\"attackNumber\\\" placeholder=\\\"Enter Attack No.\\\" required #attackNo=\\\"ngModel\\\">\\r\\n        </div>\\r\\n        <mat-error *ngIf=\\\"attackNo.invalid\\\">\\r\\n          Please enter an attack number\\r\\n        </mat-error>\\r\\n      </mat-form-field>\\r\\n      <mat-form-field>\\r\\n        <div class=\\\"input-group\\\">\\r\\n          <input matInput name=\\\"attackName\\\" ngModel placeholder=\\\"Enter Attack Name\\\" required #attackName=\\\"ngModel\\\">\\r\\n        </div>\\r\\n        <mat-error *ngIf=\\\"attackName.invalid\\\">\\r\\n          Please enter an attack name\\r\\n        </mat-error>\\r\\n      </mat-form-field>\\r\\n      <mat-form-field>\\r\\n        <div class=\\\"input-group\\\">\\r\\n          <input matInput name=\\\"powerpoints\\\" ngModel placeholder=\\\"Enter Power Points\\\" required #pp=\\\"ngModel\\\">\\r\\n        </div>\\r\\n        <mat-error *ngIf=\\\"pp.invalid\\\">\\r\\n          Please enter the power points\\r\\n        </mat-error>\\r\\n      </mat-form-field>\\r\\n      <mat-form-field>\\r\\n        <div class=\\\"input-group\\\">\\r\\n          <input matInput name=\\\"power\\\" ngModel placeholder=\\\"Enter Power\\\" required #power=\\\"ngModel\\\">\\r\\n        </div>\\r\\n        <mat-error *ngIf=\\\"power.invalid\\\">\\r\\n          Please enter the power\\r\\n        </mat-error>\\r\\n      </mat-form-field>\\r\\n      <mat-form-field>\\r\\n        <div class=\\\"input-group\\\">\\r\\n          <input matInput name=\\\"accuracy\\\" ngModel placeholder=\\\"Enter Accuracy\\\" required #accuracy=\\\"ngModel\\\">\\r\\n        </div>\\r\\n        <mat-error *ngIf=\\\"accuracy.invalid\\\">\\r\\n          Please enter the accuracy\\r\\n        </mat-error>\\r\\n      </mat-form-field>\\r\\n      <mat-form-field>\\r\\n        <div class=\\\"input-group\\\">\\r\\n          <input matInput name=\\\"type\\\" ngModel placeholder=\\\"Entery Type\\\" required #type=\\\"ngModel\\\">\\r\\n        </div>\\r\\n        <mat-error *ngIf=\\\"type.invalid\\\">\\r\\n          Please enter a Type\\r\\n        </mat-error>\\r\\n      </mat-form-field>\\r\\n      <mat-form-field>\\r\\n        <div class=\\\"input-group\\\">\\r\\n          <input matInput name=\\\"category\\\" ngModel placeholder=\\\"Enter Category\\\" required #category=\\\"ngModel\\\">\\r\\n        </div>\\r\\n        <mat-error *ngIf=\\\"category.invalid\\\">\\r\\n          Please enter a category\\r\\n        </mat-error>\\r\\n      </mat-form-field>\\r\\n      <hr>\\r\\n      <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\">Add</button>\\r\\n    </mat-card>\\r\\n  </form>\\r\\n</div>\\r\\n\"","import { AttacksService } from './../../services/attacks.service';\r\nimport { PokemonService } from './../../services/pokemon.service';\r\nimport { MatSnackBar } from '@angular/material';\r\nimport { Attacks } from './../../models/pokemon/attacks.model';\r\nimport { NgForm } from '@angular/forms';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-attack-create',\r\n  templateUrl: './attack-create.component.html',\r\n  styleUrls: ['./attack-create.component.css']\r\n})\r\nexport class AttackCreateComponent implements OnInit {\r\n\r\n  constructor(private snackbar: MatSnackBar, private pokemonService: PokemonService, private attackService: AttacksService) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onSubmit(form: NgForm) {\r\n    if ( form.invalid ) {\r\n      return;\r\n    }\r\n\r\n    const attack: Attacks = {\r\n      id: null,\r\n      attackNumber: form.value.attackNumber,\r\n      attackName: form.value.attackName,\r\n      power: form.value.power,\r\n      PP: form.value.powerpoints,\r\n      accuracy: form.value.accuracy,\r\n      type: form.value.type,\r\n      category: form.value.category\r\n    };\r\n\r\n    this.attackService.addAttack(attack);\r\n\r\n    form.resetForm();\r\n\r\n    this.snackbar.open('Attack Added', 'Close', {\r\n      duration: 3000\r\n    });\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<p>\\r\\n  attack-list works!\\r\\n</p>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-attack-list',\r\n  templateUrl: './attack-list.component.html',\r\n  styleUrls: ['./attack-list.component.css']\r\n})\r\nexport class AttackListComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \"mat-spinner{\\r\\n\\r\\n  margin-top: 10em;\\r\\n  margin-bottom: auto;\\r\\n  margin-left: auto;\\r\\n  margin-right: auto;\\r\\n}\\r\\n/*img {\\r\\n  width: 200px;\\r\\n  height: 200px;\\r\\n}*/\\r\\n.weaknesses, .resistances {\\r\\n  margin-top: 5em;\\r\\n}\\r\\nmat-card{\\r\\n  width: 100%;\\r\\n}\\r\\ntable {\\r\\n  margin-left: auto;\\r\\n  margin-right: auto;\\r\\n  width: 100%;\\r\\n}\\r\\n\"","module.exports = \"<mat-spinner *ngIf=\\\"!finishedLoading\\\" [diameter]=\\\"200\\\" [strokeWidth]=\\\"10\\\" mode=\\\"indeterminate\\\"></mat-spinner>\\r\\n<div *ngIf=\\\"pokemon && finishedLoading\\\">\\r\\n  <div class=\\\"container-fluid\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-4 col-sm-4\\\">\\r\\n        <mat-card>\\r\\n          <mat-card-header>\\r\\n            <div mat-card-avatar [style]=\\\"updateBackground()\\\">\\r\\n            </div>\\r\\n            <mat-card-title>{{pokemon.pokemonName}}</mat-card-title>\\r\\n            <mat-card-subtitle>Kdex: #{{pokemon.kdex}}</mat-card-subtitle>\\r\\n            <mat-card-subtitle>Type: {{pokemon.types}}</mat-card-subtitle>\\r\\n          </mat-card-header>\\r\\n          <mat-card-content>\\r\\n            <div class=\\\"basic-pokemon-info\\\">\\r\\n              <p> Evolution: <a href=\\\"\\\">{{pokemon.evolution.pokemonName}}</a></p>\\r\\n              <p> Ability: {{pokemon.abilities.abilityName}}</p>\\r\\n              <p> Height: {{pokemon.height}}\\\"</p>\\r\\n              <p> Weight: {{pokemon.weight}} lbs.</p>\\r\\n              <p> Description: {{pokemon.description}}</p>\\r\\n            </div>\\r\\n          </mat-card-content>\\r\\n        </mat-card>\\r\\n      </div>\\r\\n      <div class=\\\"col-md-6 col-sm-8 col-xs-4\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"col-md-6 col-sm-6\\\">\\r\\n            <mat-accordion>\\r\\n              <mat-expansion-panel>\\r\\n                <mat-expansion-panel-header>\\r\\n                  <h5>Reistances</h5>\\r\\n                </mat-expansion-panel-header>\\r\\n                <div>\\r\\n                  <div *ngFor=\\\"let t of pokemon.resistances.resistances\\\">\\r\\n                    <p>{{t}}</p>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </mat-expansion-panel>\\r\\n            </mat-accordion>\\r\\n          </div>\\r\\n          <div class=\\\"col-md-6 col-sm-6\\\">\\r\\n            <mat-expansion-panel>\\r\\n              <mat-expansion-panel-header>\\r\\n                <h5>Weaknesses</h5>\\r\\n              </mat-expansion-panel-header>\\r\\n              <div>\\r\\n                <div *ngFor=\\\"let t of pokemon.weaknesses.weaknesses\\\">\\r\\n                  <p>{{t}}</p>\\r\\n                </div>\\r\\n              </div>\\r\\n            </mat-expansion-panel>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\" style=\\\"margin-top: 2em;\\\">\\r\\n          <div class=\\\"col-md-12 col-sm-12 col-xs-12\\\">\\r\\n            <mat-card>\\r\\n              <mat-card-header>\\r\\n                <mat-card-title>Moveset</mat-card-title>\\r\\n              </mat-card-header>\\r\\n              <mat-card-content>\\r\\n                <table mat-table *ngIf=\\\"pokemon.moveset != undefined\\\" [dataSource]=\\\"pokemon.moveset.attacks\\\" class=\\\"mat-elevation-z8\\\">\\r\\n                  <ng-container matColumnDef=\\\"attackNo\\\">\\r\\n                    <th mat-header-cell *matHeaderCellDef>Attack No.</th>\\r\\n                    <td mat-cell *matCellDef=\\\"let element\\\">{{element.attackNumber}}</td>\\r\\n                    <td mat-cell><button>Remove</button></td>\\r\\n                  </ng-container>\\r\\n                  <ng-container matColumnDef=\\\"attackName\\\">\\r\\n                    <th mat-header-cell *matHeaderCellDef>Attack Name</th>\\r\\n                    <td mat-cell *matCellDef=\\\"let element\\\">{{element.attackName}}</td>\\r\\n                  </ng-container>\\r\\n                  <ng-container matColumnDef=\\\"PP\\\">\\r\\n                    <th mat-header-cell *matHeaderCellDef>Power Points</th>\\r\\n                    <td mat-cell *matCellDef=\\\"let element\\\">{{element.PP}}</td>\\r\\n                  </ng-container>\\r\\n                  <ng-container matColumnDef=\\\"power\\\">\\r\\n                    <th mat-header-cell *matHeaderCellDef>Power</th>\\r\\n                    <td mat-cell *matCellDef=\\\"let element\\\">{{element.power}}</td>\\r\\n                  </ng-container>\\r\\n                  <ng-container matColumnDef=\\\"accuracy\\\">\\r\\n                    <th mat-header-cell *matHeaderCellDef>Accuracy</th>\\r\\n                    <td mat-cell *matCellDef=\\\"let element\\\">{{element.accuracy}}</td>\\r\\n                  </ng-container>\\r\\n                  <ng-container matColumnDef=\\\"type\\\">\\r\\n                    <th mat-header-cell *matHeaderCellDef>Type</th>\\r\\n                    <td mat-cell *matCellDef=\\\"let element\\\">{{element.type}}</td>\\r\\n                  </ng-container>\\r\\n                  <ng-container matColumnDef=\\\"category\\\">\\r\\n                    <th mat-header-cell *matHeaderCellDef>Category</th>\\r\\n                    <td mat-cell *matCellDef=\\\"let element\\\">{{element.category}}</td>\\r\\n                  </ng-container>\\r\\n                  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n                  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                </table>\\r\\n              </mat-card-content>\\r\\n            </mat-card>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"col-md-2\\\">\\r\\n        <mat-card>\\r\\n          <mat-card-title>Stats</mat-card-title>\\r\\n          <mat-card-content>\\r\\n            <div *ngIf=\\\"pokemon.stats != undefined\\\">\\r\\n              <p><b>HP:</b> {{pokemon.stats.hp}}</p>\\r\\n              <p><b>Attack:</b> {{pokemon.stats.attack}}</p>\\r\\n              <p><b>Defense:</b> {{pokemon.stats.defense}}</p>\\r\\n              <p><b>Special Attack:</b> {{pokemon.stats.special_attack}}</p>\\r\\n              <p><b>Special Defense:</b> {{pokemon.stats.special_defense}}</p>\\r\\n              <p><b>Speed</b> {{pokemon.stats.speed}}</p>\\r\\n            </div>\\r\\n          </mat-card-content>\\r\\n        </mat-card>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","import { Pokemon } from './../../../models/pokemon/pokemon.model';\r\nimport { PokemonService } from './../../../services/pokemon.service';\r\nimport { map} from 'rxjs/operators';\r\nimport { Component, OnInit, OnDestroy, AfterViewInit, ElementRef, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport {interval} from 'rxjs';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport {Chart} from 'chart.js';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.css']\r\n})\r\nexport class DashboardComponent implements OnInit, OnDestroy, AfterViewInit {\r\n\r\n\r\n  private id;\r\n\r\n  chart = [];\r\n\r\n  data: any[] = [];\r\n\r\n  displayedColumns: string[] = ['attackNo', 'attackName', 'PP', 'accuracy', 'type', 'category'];\r\n\r\n  pokemon: Pokemon;\r\n\r\n  pokemonSub: Subscription;\r\n  timeSub: Subscription;\r\n  finishedLoading = false;\r\n\r\n  @ViewChild('chart') chartRef;\r\n\r\n  context: any;\r\n\r\n  constructor(private route: ActivatedRoute, private pokemonService: PokemonService, private sanitizer: DomSanitizer) { }\r\n\r\n  ngOnInit() {\r\n\r\n    this.finishedLoading = false;\r\n    this.route.params.pipe(map(params => params['id'])).subscribe((id) => {\r\n      this.id = id;\r\n    });\r\n\r\n    this.pokemonService.getAPokemon(this.id);\r\n\r\n    this.pokemonSub = this.pokemonService.getPokemonUpdatedListener().subscribe((p) => {\r\n      this.pokemon = p;\r\n      console.log(this.pokemon);\r\n\r\n      // this.data = this.pokemon\r\n      /**This was used to help visualize the progress spinner */\r\n      /*this.timeSub = interval(3000).subscribe(() => {\r\n\r\n      });*/\r\n      this.finishedLoading = true;\r\n\r\n\r\n    });\r\n\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // if i don't unsubsribe, the number of items in the feed will increase (n+1)\r\n    this.pokemonSub.unsubscribe();\r\n    // this.timeSub.unsubscribe();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n\r\n  }\r\n\r\n  // little hack for now. will implement sprite upload soon but this'll be a good format to have.\r\n  updateBackground() {\r\n    const p = this.pokemon.pokemonName.toLowerCase();\r\n    const imageUrl = `https://img.pokemondb.net/sprites/silver/normal/${p}.png`;\r\n\r\n    return this.sanitizer.bypassSecurityTrustStyle('background-image: url(' + imageUrl + '); background-size: cover');\r\n  }\r\n}\r\n","module.exports = \".jumbotron {\\r\\n  background-color: aliceblue;\\r\\n  width: 100%;\\r\\n}\\r\\nmat-form-field {\\r\\n  width: 100%;\\r\\n}\\r\\n#add_button {\\r\\n  z-index: 1;\\r\\n}\\r\\n#first{\\r\\n  margin-bottom: 1.5em;\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n\"","module.exports = \"<div class=\\\"container\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-6 col-xs-12\\\">\\r\\n      <div>\\r\\n        <h1 style=\\\"text-align: left\\\">Create/Edit Moveset</h1>\\r\\n        <!--Some reason, the editor says this is wrong, but it is working-->\\r\\n        <form (submit)=\\\"addMoveset(movesetForm)\\\" #movesetForm=\\\"ngForm\\\" [formGroup]=\\\"movesetFormGroup\\\">\\r\\n          <mat-card id=\\\"first\\\">\\r\\n            <mat-form-field>\\r\\n              <mat-select placeholder=\\\"Select Pokemon\\\" name=\\\"selectedPokemon\\\" [formControl]=\\\"pokmonControl\\\" required\\r\\n                disableOptionCentering=\\\"false\\\" (selectionChange)=\\\"onselect($event.value)\\\">\\r\\n                <mat-option>--</mat-option>\\r\\n                <mat-option *ngFor=\\\"let s of selectOptions\\\" [value]=\\\"s\\\">\\r\\n                  {{s.pokemonName}}\\r\\n                </mat-option>\\r\\n              </mat-select>\\r\\n              <mat-error *ngIf=\\\"pokmonControl.hasError('required')\\\">\\r\\n                Please select a Pokemon\\r\\n              </mat-error>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field>\\r\\n              <mat-select placeholder=\\\"Select Attack\\\" name=\\\"selectedAttack\\\" [formControl]=\\\"attackControl\\\" required\\r\\n                disableOptionCentering=\\\"false\\\" (selectionChange)=\\\"onselectAttack($event.value)\\\">\\r\\n                <mat-option [value]=\\\"'none'\\\">--</mat-option>\\r\\n                <mat-option *ngFor=\\\"let a of selectAttackOptions\\\" [value]=\\\"a\\\">\\r\\n                  {{a.attackName}}\\r\\n                </mat-option>\\r\\n              </mat-select>\\r\\n              <mat-error *ngIf=\\\"attackControl.hasError('required')\\\">\\r\\n                Please select an attack\\r\\n              </mat-error>\\r\\n            </mat-form-field>\\r\\n            <hr>\\r\\n            <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\">Submit</button>\\r\\n          </mat-card>\\r\\n        </form>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-6 col-xs-12\\\">\\r\\n      <app-moveset-list></app-moveset-list>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n\"","import { Pokemon } from './../../models/pokemon/pokemon.model';\r\nimport { Moveset } from './../../models/pokemon/movset.model';\r\nimport { AttacksService } from './../../services/attacks.service';\r\nimport { MatSnackBar, MatGridTileHeaderCssMatStyler } from '@angular/material';\r\nimport { Attacks } from './../../models/pokemon/attacks.model';\r\nimport { PokemonService } from './../../services/pokemon.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { Component, OnInit, OnDestroy, Output, EventEmitter } from '@angular/core';\r\nimport { FormControl, Validators, NgForm, FormGroup } from '@angular/forms';\r\nimport { error } from 'protractor';\r\n\r\n@Component({\r\n  selector: 'app-moveset-create',\r\n  templateUrl: './moveset-create.component.html',\r\n  styleUrls: ['./moveset-create.component.css']\r\n})\r\nexport class MovesetCreateComponent implements OnInit, OnDestroy {\r\n\r\n  constructor(private pokemonService: PokemonService, private attackService: AttacksService, private snackbar: MatSnackBar) { }\r\n\r\n  public selectOptions: {id: string, kdex: number, pokemonName: string}[];\r\n\r\n  public selectAttackOptions: Attacks[];\r\n\r\n  private selectedPokemon: {id: string, kdex: number, pokemonName: string};\r\n  private selectedAttacks: Attacks[] = [];\r\n\r\n  // Subscribes to the selected pokemon feed\r\n  private pokemonSubs: Subscription;\r\n\r\n  // Subscribes to the total attack list feed\r\n  private attackListSubscription: Subscription;\r\n  // Subscribes to the selected attack list feed\r\n  private selectedAttackListSub: Subscription;\r\n\r\n  private movesetExists: Subscription;\r\n\r\n  private movesetSub: Subscription;\r\n\r\n  doesMovesetExist = false;\r\n\r\n  moveset: Moveset;\r\n\r\n  pokmonControl: FormControl = new FormControl('', Validators.required);\r\n\r\n  attackControl: FormControl = new FormControl('', Validators.required);\r\n\r\n  movesetFormGroup: FormGroup = new FormGroup({\r\n    pokemonContrl: this.pokmonControl, attackControl: this.attackControl\r\n  });\r\n\r\n\r\n  ngOnInit() {\r\n    this.pokemonService.getPokemonOptions();\r\n    this.pokemonSubs = this.pokemonService.getPokemonOptionsUpdateListener()\r\n                                          .subscribe((options: {id: string, kdex: number, pokemonName: string}[]) => {\r\n                                            this.selectOptions = options;\r\n                                          });\r\n    this.attackService.getAttackOptions();\r\n\r\n    // Subscribe to the feed that has the total list of all the attacks (and the total list updates in real time)\r\n    // from the database\r\n    this.attackListSubscription = this.attackService.getAttacksListUpdatedListener().subscribe((attacks) => {\r\n      this.selectAttackOptions = attacks;\r\n    });\r\n\r\n    // Subscribe to the feed that has all of the selectd attacks\r\n    /**This component has the responsiblity of adding all of the\r\n     * the selected attacks to the moveset collection in the cloud db.\r\n     * We are pushing the list of selected attacks in a feed because\r\n     * the moveset list component will retrieve the attacks from the feed\r\n     * and can remove items from the feed.\r\n     * This component will be listening to the event the total selected attacks feed has had\r\n     * new entries added to it or removed from it.\r\n     */\r\n    this.selectedAttackListSub = this.attackService.getAllSelectedAttacks().subscribe((attacks) => {\r\n      this.selectedAttacks = attacks;\r\n    });\r\n\r\n    // We extract the boolean value from the feed to see if the moveset already exists in the DB\r\n    this.movesetExists = this.attackService.getMovesetExistFeedUpdateListener().subscribe((value) => {\r\n      console.log('Does moveset exist(1)? ' + value);\r\n      this.doesMovesetExist = value;\r\n    });\r\n\r\n    this.movesetSub = this.attackService.getMovesetUpdateListener().subscribe((value) => {\r\n      this.moveset = value;\r\n    });\r\n\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.pokemonSubs.unsubscribe();\r\n    this.attackListSubscription.unsubscribe();\r\n    this.selectedAttackListSub.unsubscribe();\r\n    this.movesetExists.unsubscribe();\r\n    this.movesetSub.unsubscribe();\r\n  }\r\n\r\n  onselect(pokemon): void {\r\n    // I want to pass the selected option from mat-select\r\n    try {\r\n      if (pokemon === undefined) {\r\n        throw console.error('Error while selecting pokemon');\r\n      }\r\n      // Adding it to the feed so the moveset list component can look into this feed.\r\n      this.pokemonService.addToSelectedPokemonFeed(pokemon);\r\n      this.selectedPokemon = pokemon;\r\n\r\n      this.attackService.checkIfMovesetExists(this.selectedPokemon);\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  onselectAttack(attack) {\r\n    try {\r\n      if (attack === undefined) {\r\n        console.log('Cannot select undefined');\r\n      } else {\r\n        // console.log(attack.id);\r\n        console.log(attack);\r\n        if (attack !== 'none') {\r\n          // instead, add a single attack to the feed\r\n          /**Send the selected attack to the moveset-list component */\r\n          this.attackService.addToSelectedAttackFeed(attack);\r\n          /**And add the list to the total selected attacks */\r\n          this.attackService.addToAllSelectedAttacksFeed(attack);\r\n        }\r\n      }\r\n    } catch (err) {\r\n\r\n    }\r\n  }\r\n\r\n  addMoveset(form: NgForm) {\r\n    console.log('Here: ' + this.selectedAttacks.length);\r\n    if (form.invalid && this.selectedAttacks.length !== 0) {\r\n      return;\r\n    }\r\n\r\n    const attackIds: string[] = [];\r\n    this.selectedAttacks.forEach( a => {\r\n      attackIds.push(a.id);\r\n    });\r\n\r\n\r\n\r\n    if (!this.doesMovesetExist) {\r\n      console.log('Adding Moveset');\r\n      const moveset = {\r\n        pokemonId: this.selectedPokemon.id,\r\n        attacks: attackIds\r\n      };\r\n\r\n      this.attackService.addMoveset(moveset);\r\n    } else {\r\n      console.log('Updating Moveset');\r\n      const updateMoveset = {\r\n        id: this.moveset.id,\r\n        pokemonId: this.selectedPokemon.id,\r\n        attacks: attackIds\r\n      };\r\n\r\n      console.log(updateMoveset);\r\n\r\n      this.attackService.updateMoveset(updateMoveset);\r\n    }\r\n\r\n    form.resetForm();\r\n\r\n    this.attackService.removeAllFromSelectedAttackFeed();\r\n\r\n    this.attackService.clearSelectedAttacksFeeed();\r\n\r\n    // This step is done to reset the Header above the table in the UI\r\n    this.pokemonService.addToSelectedPokemonFeed({id: null, kdex: null, pokemonName: ''});\r\n\r\n    this.snackbar.open('Moveset Added', 'Close', {\r\n      duration: 3000\r\n    });\r\n  }\r\n}\r\n","module.exports = \"table{\\r\\n  width: 100%;\\r\\n}\\r\\nmat-spinner{\\r\\n  margin-top: 2em;\\r\\n  margin-bottom: auto;\\r\\n  margin-left: auto;\\r\\n  margin-right: auto;\\r\\n}\\r\\n\"","module.exports = \"<h1 *ngIf=\\\"selectedPokemonName == ''\\\">Moveset</h1>\\r\\n<h1 *ngIf=\\\"selectedPokemonName != ''\\\">{{selectedPokemonName}}'s Moveset</h1>\\r\\n<mat-spinner *ngIf=\\\"!finishedLoading\\\" [diameter]=\\\"200\\\" [strokeWidth]=\\\"10\\\" mode=\\\"indeterminate\\\"></mat-spinner>\\r\\n<div *ngIf=\\\"finishedLoading\\\">\\r\\n  <table mat-table [dataSource]=\\\"data\\\" class=\\\"mat-elevation-z8\\\">\\r\\n    <ng-container matColumnDef=\\\"attackNo\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef>Attack No.</th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\">{{element.attackNumber}}</td>\\r\\n      <td mat-cell><button>Remove</button></td>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"attackName\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef>Attack Name</th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\">{{element.attackName}}</td>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"PP\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef>Power Points</th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\">{{element.PP}}</td>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"power\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef>Power</th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\">{{element.power}}</td>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"accuracy\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef>Accuracy</th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\">{{element.accuracy}}</td>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"type\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef>Type</th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\">{{element.type}}</td>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"category\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef>Category</th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\">{{element.category}}</td>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"actions\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef>Action</th>\\r\\n      <td mat-cell *matCellDef=\\\"let row\\\">\\r\\n        <button mat-icon-button (click)=\\\"removeAttack(row)\\\">\\r\\n          <mat-icon>remove_circle_outline</mat-icon>\\r\\n        </button>\\r\\n      </td>\\r\\n    </ng-container>\\r\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n  </table>\\r\\n</div>\\r\\n\"","import { AttacksService } from './../../services/attacks.service';\r\nimport { Attacks } from './../../models/pokemon/attacks.model';\r\nimport { map } from 'rxjs/operators';\r\nimport { PokemonService } from './../../services/pokemon.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-moveset-list',\r\n  templateUrl: './moveset-list.component.html',\r\n  styleUrls: ['./moveset-list.component.css']\r\n})\r\nexport class MovesetListComponent implements OnInit, OnDestroy {\r\n\r\n  constructor(private pokemonService: PokemonService, private attackService: AttacksService) { }\r\n  data: Attacks[] = [];\r\n\r\n  private attacksFromMoveList: Attacks[] = [];\r\n\r\n  private doesMovesetExist = false;\r\n  private selectedPokemonFeed: Subscription;\r\n\r\n  private selectedAttacksFeed: Subscription;\r\n\r\n  private movesetFeed: Subscription;\r\n\r\n  private clearSelectedAttacksListener: Subscription;\r\n\r\n  private movesetExist: Subscription;\r\n\r\n  selectedPokemonName = '';\r\n\r\n  selectedPokemon: {id: string, kdex: number, pokemonName: string};\r\n\r\n  finishedLoading = false;\r\n\r\n  displayedColumns: string[] = ['attackNo', 'attackName', 'PP', 'accuracy', 'type', 'category', 'actions'];\r\n  ngOnInit() {\r\n\r\n    this.finishedLoading = true;\r\n    this.selectedPokemonName = '';\r\n    this.selectedPokemonFeed = this.pokemonService.getSelectedPokemon().subscribe((selectedPokemon) => {\r\n\r\n\r\n\r\n      this.selectedPokemon = selectedPokemon;\r\n      this.selectedPokemonName = this.selectedPokemon.pokemonName;\r\n\r\n      // this.attackService.checkIfMovesetExists(this.selectedPokemon);\r\n      // this.data = [];\r\n      // this will get the latest pokemon in the 'select-pokemon-feed'\r\n      // and use it to query for the list of attacks belonging to that pokemon\r\n      // this.pokemonService.queryForSelectedPokemon(this.pokemonToQueryFor);\r\n\r\n      if ( this.selectedPokemon.pokemonName === '') {\r\n        this.finishedLoading = true;\r\n      } else {\r\n        this.finishedLoading = false;\r\n      }\r\n\r\n      this.data.splice(0);\r\n\r\n      this.data = [...this.data];\r\n\r\n    });\r\n\r\n    // this.results = this.pokemonService.getAttackListsFromQuery().subscribe();\r\n    this.selectedAttacksFeed = this.attackService.getSelectedAttacks().subscribe( (selectedAttack) => {\r\n\r\n      if ( this.attacksFromMoveList.length === 0 ) {\r\n\r\n        this.data = this.data.concat(selectedAttack);\r\n      } else {\r\n        this.data = this.data.concat(selectedAttack);\r\n      }\r\n      console.log(this.data);\r\n\r\n    });\r\n\r\n    this.movesetFeed = this.attackService.getMovesetUpdateListener().subscribe((value) => {\r\n\r\n      this.attacksFromMoveList = value.attacks;\r\n\r\n      if (this.attacksFromMoveList.length > 0) {\r\n        this.data = this.attacksFromMoveList;\r\n\r\n        this.attackService.addToAllSelectedAttacksFeed2(this.attacksFromMoveList);\r\n        console.log('has attacks');\r\n\r\n      }\r\n\r\n    });\r\n\r\n    this.movesetExist = this.attackService.getMovesetExistFeedUpdateListener().subscribe((value) => {\r\n      if (!value ) {\r\n        this.data.splice(0);\r\n        this.data = [...this.data];\r\n      }\r\n\r\n      this.finishedLoading = true;\r\n    });\r\n\r\n    this.clearSelectedAttacksListener = this.attackService.getClearSignal().subscribe((value) => {\r\n\r\n      if (value) {\r\n        this.data.splice(0);\r\n        this.data = [...this.data];\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  removeAttack(attackRemoving: Attacks) {\r\n\r\n    console.log('Removing attack: ' + attackRemoving.attackName);\r\n    // remove the attack from the data!\r\n    // this.data = this.data.filter(attack => attack.attackName !== attackRemoving.attackName);\r\n    // remove the attack from the feed too!!\r\n    const index = this.data.findIndex((a) =>  a.attackName === attackRemoving.attackName );\r\n    console.log('From the component: ' + index);\r\n\r\n    if (index !== - 1) {\r\n      this.data.splice(index, 1);\r\n      // need to notify the DOM that the data array has been updated by setting it equal to the spread\r\n      this.data = [...this.data];\r\n      console.log(this.data);\r\n      this.attackService.addToAllSelectedAttacksFeed2(this.data);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.selectedPokemonFeed.unsubscribe();\r\n    this.selectedAttacksFeed.unsubscribe();\r\n    this.movesetFeed.unsubscribe();\r\n    this.clearSelectedAttacksListener.unsubscribe();\r\n    this.movesetExist.unsubscribe();\r\n  }\r\n}\r\n","module.exports = \".jumbotron  {\\r\\n  background-color: aliceblue;\\r\\n}\\r\\n\\r\\nmat-form-field {\\r\\n  width: 100%;\\r\\n  margin-bottom: 1em;\\r\\n}\\r\\n\\r\\n#spacer {\\r\\n  flex: 1 1 auto;\\r\\n}\\r\\n\\r\\n#add_button{\\r\\n  margin-left: 0;\\r\\n  float: right;\\r\\n  z-index: 0;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"jumbotron\\\">\\r\\n  <h1 style=\\\"text-align: center\\\">Create Pokemon Entry</h1>\\r\\n  <form (submit)=\\\"onAddPokemon(pokemonForm)\\\" #pokemonForm=\\\"ngForm\\\">\\r\\n    <mat-card>\\r\\n      <mat-form-field>\\r\\n        <input matInput type=\\\"text\\\" name=\\\"name\\\" ngModel placeholder=\\\"Enter Pokemon Name\\\" required minlength=\\\"3\\\" #title=\\\"ngModel\\\">\\r\\n        <mat-error *ngIf=\\\"title.invalid\\\">\\r\\n          Please enter a Pokemon name\\r\\n        </mat-error>\\r\\n      </mat-form-field>\\r\\n      <mat-form-field>\\r\\n        <input matInput type=\\\"text\\\" name=\\\"kdex\\\" ngModel placeholder=\\\"Enter kdex number\\\" required #kdex=\\\"ngModel\\\">\\r\\n        <mat-error *ngIf=\\\"kdex.invalid\\\">\\r\\n          Please enter a kDex number\\r\\n        </mat-error>\\r\\n      </mat-form-field>\\r\\n      <mat-form-field>\\r\\n       <mat-select placeholder=\\\"Select a Type\\\" (selectionChange)=\\\"updateSelectedTypes($event.value)\\\" multiple #types>\\r\\n         <mat-option>--</mat-option>\\r\\n         <mat-option *ngFor=\\\"let t of types_OptionsArray\\\" [value]=\\\"t\\\" #type [disabled]=\\\"selectedTypesCount >= maxTypesCount && !type.selected\\\">\\r\\n          {{t}}\\r\\n         </mat-option>\\r\\n       </mat-select>\\r\\n        <mat-error *ngIf=\\\"\\\">\\r\\n          Please enter its type\\r\\n        </mat-error>\\r\\n      </mat-form-field>\\r\\n      <mat-form-field>\\r\\n        <input matInput type=\\\"text\\\" name=\\\"evolutionName\\\" ngModel placeholder=\\\"Enter an evolution\\\" required #evolution=\\\"ngModel\\\">\\r\\n        <mat-error *ngIf=\\\"evolution.invalid\\\">\\r\\n          Please enter an evolution\\r\\n        </mat-error>\\r\\n      </mat-form-field>\\r\\n      <mat-form-field>\\r\\n\\r\\n        <mat-select placeholder=\\\"Select a Resistance\\\" (selectionChange)=\\\"updateSelectedResistances($event.value)\\\" multiple>\\r\\n          <mat-option>--</mat-option>\\r\\n          <mat-option *ngFor=\\\"let t of types_OptionsArray\\\" [value] = \\\"t\\\">\\r\\n            {{t}}\\r\\n          </mat-option>\\r\\n        </mat-select>\\r\\n\\r\\n        <mat-error *ngIf=\\\"\\\">\\r\\n          Please enter a reistance\\r\\n        </mat-error>\\r\\n      </mat-form-field>\\r\\n      <mat-form-field>\\r\\n        <mat-select placeholder=\\\"Select a Weakness\\\" (selectionChange)=\\\"updateSelectedWeaknesses($event.value)\\\" multiple>\\r\\n          <mat-option>--</mat-option>\\r\\n          <mat-option *ngFor=\\\"let t of types_OptionsArray\\\" [value]=\\\"t\\\">\\r\\n           {{t}}\\r\\n          </mat-option>\\r\\n        </mat-select>\\r\\n        <mat-error *ngIf=\\\"\\\">\\r\\n          Enter a weakness\\r\\n        </mat-error>\\r\\n      </mat-form-field>\\r\\n      <mat-form-field>\\r\\n        <input matInput type=\\\"text\\\" name=\\\"ability\\\" ngModel placeholder=\\\"Enter an ability\\\" required #ability=\\\"ngModel\\\">\\r\\n        <mat-error *ngIf=\\\"ability.invalid\\\">\\r\\n          Please enter an ability\\r\\n        </mat-error>\\r\\n      </mat-form-field>\\r\\n      <mat-form-field>\\r\\n        <input matInput type=\\\"number\\\" name=\\\"height\\\" ngModel placeholder=\\\"Enter height\\\" required #height=\\\"ngModel\\\">\\r\\n        <mat-error *ngIf=\\\"height.invalid\\\">\\r\\n          Please enter a height\\r\\n        </mat-error>\\r\\n      </mat-form-field>\\r\\n      <mat-form-field>\\r\\n        <input matInput type=\\\"number\\\" name=\\\"weight\\\" ngModel placeholder=\\\"Enter weight\\\" required #weight=\\\"ngModel\\\">\\r\\n        <mat-error *ngIf=\\\"weight.invalid\\\">\\r\\n          Please enter a weight\\r\\n        </mat-error>\\r\\n      </mat-form-field>\\r\\n      <mat-form-field>\\r\\n        <textarea matInput rows=\\\"4\\\" name=\\\"description\\\" ngModel placeholder=\\\"Enter a description\\\" required #description=\\\"ngModel\\\">\\r\\n\\r\\n        </textarea>\\r\\n        <mat-error *ngIf=\\\"description.invalid\\\">\\r\\n          Please enter a description\\r\\n        </mat-error>\\r\\n      </mat-form-field>\\r\\n      <hr>\\r\\n      <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\">Submit</button>\\r\\n    </mat-card>\\r\\n  </form>\\r\\n</div>\\r\\n\"","import { PokemonService } from './../../services/pokemon.service';\r\nimport { Abilities } from './../../models/pokemon/abilities.model';\r\nimport { Weaknesses } from './../../models/pokemon/weaknesses.model';\r\nimport { Evolutions } from './../../models/pokemon/evolutions.model';\r\nimport { Pokemon } from './../../models/pokemon/pokemon.model';\r\nimport { NgForm } from '@angular/forms';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Resistances } from 'src/app/models/pokemon/resistances.model';\r\nimport { MatSnackBar } from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'app-pokemon-create',\r\n  templateUrl: './pokemon-create.component.html',\r\n  styleUrls: ['./pokemon-create.component.css']\r\n})\r\nexport class PokemonCreateComponent implements OnInit {\r\n\r\n  constructor(private pokemonService: PokemonService, private snackbar: MatSnackBar) { }\r\n\r\n  types_OptionsArray: string[] = [];\r\n\r\n  selectedResistances: string[] = [];\r\n\r\n  selectedWeaknesses: string[] = [];\r\n\r\n  selectedTypes: string[] = [];\r\n\r\n  maxTypesCount = 2;\r\n\r\n  selectedTypesCount = 0;\r\n\r\n  ngOnInit() {\r\n    this.types_OptionsArray = [\r\n      'Fire',\r\n      'Water',\r\n      'Grass',\r\n      'Bug',\r\n      'Dragon',\r\n      'Ice',\r\n      'Fighting',\r\n      'Flying',\r\n      'Ghost',\r\n      'Ground',\r\n      'Normal',\r\n      'Poison',\r\n      'Psychic',\r\n      'Rock',\r\n      'Electric'\r\n    ];\r\n  }\r\n\r\n  onAddPokemon(form: NgForm) {\r\n    if (form.invalid) {\r\n      return;\r\n    }\r\n\r\n    const resistance: Resistances = {\r\n      id: null,\r\n      kdex: form.value.kdex,\r\n      pokemonName: form.value.name,\r\n      resistances: this.selectedResistances\r\n    };\r\n\r\n    const evolutions: Evolutions = {\r\n      id: null,\r\n      kdex: form.value.kdex,\r\n      pokemonName: form.value.evolutionName\r\n    };\r\n\r\n    const weakness: Weaknesses = {\r\n      id: null,\r\n      kdex: form.value.kdex,\r\n      pokemonName: form.value.name,\r\n      weaknesses: this.selectedWeaknesses\r\n    };\r\n\r\n    const ability: Abilities = {\r\n      id: null,\r\n      kdex: form.value.kdex,\r\n      abilityName: form.value.ability\r\n    };\r\n\r\n    const pokemon: Pokemon = {\r\n      id: null,\r\n      pokemonName: form.value.name,\r\n      kdex: form.value.kdex,\r\n      types: this.selectedTypes,\r\n      resistances: resistance,\r\n      evolution: evolutions,\r\n      weaknesses: weakness,\r\n      abilities: ability,\r\n      moveset: null,\r\n      stats: null,\r\n      height: form.value.height,\r\n      weight: form.value.weight,\r\n      description: form.value.description\r\n    };\r\n\r\n    this.pokemonService.addPokemon(pokemon);\r\n    form.resetForm();\r\n\r\n    this.snackbar.open('Pokemon Added', 'Close', {\r\n      duration: 2000\r\n    });\r\n  }\r\n\r\n  updateSelectedWeaknesses(value: any[]) {\r\n\r\n\r\n    this.selectedWeaknesses = [...value];\r\n\r\n    /*const index = this.types_OptionsArray.findIndex((t) => t.typeName === value);\r\n    this.types_OptionsArray[index].selected = true;*/\r\n    console.log(this.selectedWeaknesses);\r\n  }\r\n\r\n  updateSelectedResistances(value: any[]) {\r\n\r\n    this.selectedResistances = [...value];\r\n\r\n    /*const index = this.types_OptionsArray.findIndex((t) => t.typeName === value);\r\n    this.types_OptionsArray[index].selected = true;*/\r\n    console.log(this.selectedResistances);\r\n  }\r\n\r\n  updateSelectedTypes(value: any[]) {\r\n\r\n    this.selectedTypesCount = value.length;\r\n\r\n    if (this.selectedTypesCount > this.maxTypesCount) {\r\n      alert('You can only select at most 2 types');\r\n    } else {\r\n      this.selectedTypes = [...value];\r\n    }\r\n\r\n\r\n    console.log(this.selectedTypes);\r\n\r\n  }\r\n\r\n }\r\n","module.exports = \"h1 {\\r\\n  margin-top: 0.8em;\\r\\n  margin-bottom: 0.5em;\\r\\n}\\r\\nul {\\r\\n  width: 70%;\\r\\n  margin: auto;\\r\\n  list-style-type: none;\\r\\n}\\r\\nli{\\r\\n  display: inline-block;\\r\\n  margin-left: 0.2em;\\r\\n  margin-right: 0.2em;\\r\\n  text-align: center;\\r\\n  font-size: 12px;\\r\\n}\\r\\ntable {\\r\\n  border-collapse: separate;\\r\\n  border-spacing: 2.5em 0.5em;\\r\\n}\\r\\nimg {\\r\\n  display: block;\\r\\n  margin-left: auto;\\r\\n  margin-right: auto;\\r\\n}\\r\\np{\\r\\n  text-align: center;\\r\\n  margin-top: 0;\\r\\n  margin-bottom: 0;\\r\\n}\\r\\na {\\r\\n  color: inherit;\\r\\n}\\r\\ndiv.jumbotron {\\r\\n  background-color: white;\\r\\n  height: 90%;\\r\\n}\\r\\nmat-spinner{\\r\\n  margin-top: 10em;\\r\\n  margin-bottom: auto;\\r\\n  margin-left: auto;\\r\\n  margin-right: auto;\\r\\n}\\r\\np.item {\\r\\n  display: inline-block;\\r\\n  vertical-align: top;\\r\\n  margin-left: auto;\\r\\n  margin-right: auto;\\r\\n  padding: 0.15em;\\r\\n}\\r\\n.typesContainer {\\r\\n  width: 5em;\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  margin: auto;\\r\\n}\\r\\n.pokemon {\\r\\n  margin-bottom: 2em;\\r\\n}\\r\\n\"","module.exports = \"<mat-spinner *ngIf=\\\"!finishedLoading\\\" [diameter]=\\\"200\\\" [strokeWidth]=\\\"10\\\" mode=\\\"indeterminate\\\"></mat-spinner>\\r\\n<div *ngIf=\\\"finishedLoading\\\">\\r\\n  <h1 style=\\\"text-align: center\\\">Pokemon Database</h1>\\r\\n  <div class=\\\"container-fluid\\\">\\r\\n    <div>\\r\\n      <mat-card>\\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"col-lg-2 col-md-2 col-sm-2 pokemon\\\" *ngFor=\\\"let n of pokemonList\\\">\\r\\n            <img [src]=\\\"getImage(n.pokemonName)\\\" alt=\\\"Bulbasaur\\\">\\r\\n            <p style=\\\"font-size: 12px; color: darkgrey;\\\">Kdex: #{{n.kdex}}</p>\\r\\n            <p class=\\\"name\\\" style=\\\"font-size: 1em; color: skyblue\\\"><a [routerLink]=\\\"['/display', n.id]\\\">{{n.pokemonName}}</a></p>\\r\\n            <div class=\\\"typesContainer\\\">\\r\\n              <p class=\\\"item\\\" [style.font-size]=\\\"'0.75em'\\\" *ngFor=\\\"let t of n.types\\\" [style.color]=\\\"changeColor(t)\\\" >\\r\\n                <b>{{t}}</b>\\r\\n              </p>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </mat-card>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n\"","import { DomSanitizer } from '@angular/platform-browser';\r\nimport { Pokemon } from './../../models/pokemon/pokemon.model';\r\nimport { map } from 'rxjs/operators';\r\nimport { PokemonService } from './../../services/pokemon.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { type } from 'os';\r\n\r\n@Component({\r\n  selector: 'app-pokemon-list',\r\n  templateUrl: './pokemon-list.component.html',\r\n  styleUrls: ['./pokemon-list.component.css']\r\n})\r\nexport class PokemonListComponent implements OnInit, OnDestroy {\r\n\r\n  constructor(private pokemonService: PokemonService, private sanitizer: DomSanitizer) { }\r\n\r\n  private pokeListSubs: Subscription;\r\n\r\n  private Colors = {\r\n    grass: '#0b7c38',\r\n    fire: 'orange',\r\n    water: 'blue',\r\n    electric: 'gold',\r\n    flying: 'skyblue',\r\n    ground: 'brown',\r\n    poison: 'purple',\r\n    psychic: 'deeppink',\r\n    rock: '#DEB887',\r\n    normal: 'grey',\r\n    bug: '\t#8FBC8F',\r\n    dragon: 'crimson',\r\n    fighting: 'firebrick',\r\n    ice: 'powderblue',\r\n    ghost: 'mediumpurple'\r\n  };\r\n  pokemonList: {id: string, kdex: number, pokemonName: string, types: string}[] = [];\r\n\r\n  /**\r\n   * The following until OnInit will be used for the organized table\r\n   */\r\n  pokeData: Pokemon[] = []; // Array of pokemon\r\n  pokeListName = ''; // checks for empty name in html\r\n\r\n  displayedColumns: string[] = ['kdex', 'Nep', 'pokemonName', 'type'];\r\n\r\n  /**\r\n   * End of organized table\r\n   */\r\n\r\n  linkedList: {pokemonNodeLists: {id: string, kdex: number, pokemonName: string, types: string}[]} [] = [];\r\n\r\n  finishedLoading = false;\r\n\r\n  ngOnInit() {\r\n\r\n    this.finishedLoading = false;\r\n    this.pokemonService.getPokemon();\r\n    this.pokeListSubs = this.pokemonService.getPokemonGetListUpdatedListener().subscribe((pokeArr) => {\r\n      console.log(pokeArr);\r\n      this.pokemonList = pokeArr;\r\n      this.finishedLoading = true;\r\n      // console.log(this.linkedList[1].pokemonNodeLists);\r\n    });\r\n\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.pokeListSubs.unsubscribe();\r\n  }\r\n\r\n  changeColor(types: string): string {\r\n\r\n    /*if ( types[0].toLowerCase() === 'grass') {\r\n      console.log('here');\r\n      return `#0b7c38`;\r\n    }*/\r\n    console.log(types);\r\n    return this.Colors[types.toLowerCase()];\r\n  }\r\n\r\n  // litte hack for now: will implement uploading of sprites soon\r\n  getImage(n) {\r\n    const p = n.toLowerCase();\r\n    const imageUrl = `https://img.pokemondb.net/sprites/silver/normal/${p}.png`;\r\n\r\n    return this.sanitizer.bypassSecurityTrustUrl(imageUrl);\r\n  }\r\n\r\n}\r\n","module.exports = \"mat-form-field{\\r\\n  width: 100%;\\r\\n}\\r\\n\"","module.exports = \"<form (submit)=\\\"onAddStatsForm(statsForm)\\\" #statsForm=\\\"ngForm\\\">\\r\\n  <mat-form-field>\\r\\n    <mat-select placeholder=\\\"Select a Pokemon\\\" (selectionChange)=\\\"updateSelectedPokemon($event.value)\\\">\\r\\n      <mat-option>--</mat-option>\\r\\n      <mat-option *ngFor=\\\"let p of pokemonOptions\\\" [value]=\\\"p\\\">\\r\\n        {{p.pokemonName}}\\r\\n      </mat-option>\\r\\n    </mat-select>\\r\\n  </mat-form-field>\\r\\n  <div *ngIf=\\\"selectedPokemon != undefined\\\">\\r\\n    <mat-form-field>\\r\\n      <input matInput type=\\\"number\\\" name=\\\"hp\\\" ngModel placeholder=\\\"Enter HP\\\" required #hp=\\\"ngModel\\\">\\r\\n      <mat-error *ngIf=\\\"hp.invalid\\\">\\r\\n        Please enter HP\\r\\n      </mat-error>\\r\\n    </mat-form-field>\\r\\n    <mat-form-field>\\r\\n      <input matInput type=\\\"number\\\" name=\\\"attack\\\" ngModel placeholder=\\\"Enter Attack\\\" required #attack=\\\"ngModel\\\">\\r\\n      <mat-error *ngIf=\\\"attack.invalid\\\">\\r\\n        Please enter Attack\\r\\n      </mat-error>\\r\\n    </mat-form-field>\\r\\n    <mat-form-field>\\r\\n      <input matInput type=\\\"number\\\" name=\\\"defense\\\" ngModel placeholder=\\\"Enter Defense\\\" required #defense=\\\"ngModel\\\">\\r\\n      <mat-error *ngIf=\\\"defense.invalid\\\">\\r\\n        Please enter Defense\\r\\n      </mat-error>\\r\\n    </mat-form-field>\\r\\n    <mat-form-field>\\r\\n      <input matInput type=\\\"number\\\" name=\\\"special_attack\\\" ngModel placeholder=\\\"Enter Special Attack\\\" required #special_attack=\\\"ngModel\\\">\\r\\n      <mat-error *ngIf=\\\"special_attack.invalid\\\">\\r\\n        Please enter Special Attack\\r\\n      </mat-error>\\r\\n    </mat-form-field>\\r\\n    <mat-form-field>\\r\\n      <input matInput type=\\\"number\\\" name=\\\"special_defense\\\" ngModel placeholder=\\\"Enter Special Defense\\\" required #special_defense=\\\"ngModel\\\">\\r\\n      <mat-error *ngIf=\\\"special_defense.invalid\\\">\\r\\n        Please enter Special Defense\\r\\n      </mat-error>\\r\\n    </mat-form-field>\\r\\n    <mat-form-field>\\r\\n      <input matInput type=\\\"number\\\" name=\\\"speed\\\" ngModel placeholder=\\\"Enter Speed\\\" required\\r\\n        #speed=\\\"ngModel\\\">\\r\\n      <mat-error *ngIf=\\\"speed.invalid\\\">\\r\\n        Please enter Speed\\r\\n      </mat-error>\\r\\n    </mat-form-field>\\r\\n    <hr>\\r\\n    <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\">Submit</button>\\r\\n  </div>\\r\\n</form>\\r\\n\"","import { Stats } from './../../models/pokemon/stats.model';\r\nimport { NgForm } from '@angular/forms';\r\nimport { PokemonService } from './../../services/pokemon.service';\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { StatsService } from 'src/app/services/stats.service';\r\n\r\n@Component({\r\n  selector: 'app-stats-create',\r\n  templateUrl: './stats-create.component.html',\r\n  styleUrls: ['./stats-create.component.css']\r\n})\r\nexport class StatsCreateComponent implements OnInit, OnDestroy {\r\n\r\n  constructor(private pokemonService: PokemonService, private statsService: StatsService) { }\r\n\r\n  pokemonOptions: {id: string, kdex: number, pokemonName: string}[] = [];\r\n\r\n  pokemonOptionSub: Subscription;\r\n\r\n  selectedPokemon: {id: string, kdex: number, pokemonName: string} = undefined;\r\n  ngOnInit() {\r\n\r\n    this.pokemonService.getPokemonOptions();\r\n\r\n    this.pokemonOptionSub = this.pokemonService.getPokemonOptionsUpdateListener()\r\n                                               .subscribe((options) => {\r\n                                                            this.pokemonOptions = options;\r\n                                                            console.log(this.pokemonOptions);\r\n                                                          });\r\n\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.pokemonOptionSub.unsubscribe();\r\n  }\r\n\r\n  updateSelectedPokemon(pokemon: any) {\r\n    console.log(pokemon);\r\n\r\n    this.selectedPokemon = pokemon;\r\n  }\r\n\r\n  onAddStatsForm(form: NgForm) {\r\n    if (form.invalid) {\r\n      return;\r\n    }\r\n\r\n    const stats: Stats = {\r\n      id: null,\r\n      hp: form.value.hp,\r\n      attack: form.value.attack,\r\n      defense: form.value.defense,\r\n      special_attack: form.value.special_attack,\r\n      special_defense: form.value.special_defense,\r\n      speed: form.value.speed\r\n    };\r\n\r\n    this.statsService.addStat(this.selectedPokemon, stats);\r\n\r\n    form.resetForm();\r\n  }\r\n\r\n}\r\n","module.exports = \".jumbotron {\\r\\n  background-color: aliceblue;\\r\\n  height: 100%;\\r\\n  padding: 50px 50px 50px 50px;\\r\\n  border-radius: 5px;\\r\\n  margin-top: 30px;\\r\\n}\\r\\n\\r\\nmat-form-field, textarea {\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\nh1 {\\r\\n  text-align: center;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"jumbotron\\\">\\r\\n  <h1>First component of mock app</h1>\\r\\n  <mat-card>\\r\\n    <form (submit)=\\\"onAddPost(postForm)\\\" #postForm=\\\"ngForm\\\">\\r\\n    <mat-form-field>\\r\\n      <input\\r\\n      matInput\\r\\n      type=\\\"text\\\"\\r\\n      name = \\\"title\\\"\\r\\n      ngModel\\r\\n      placeholder=\\\"Enter Title\\\"\\r\\n      required\\r\\n      minlength=\\\"3\\\"\\r\\n      #title=\\\"ngModel\\\">\\r\\n      <mat-error *ngIf=\\\"title.invalid\\\">\\r\\n        Please enter a post title\\r\\n      </mat-error>\\r\\n    </mat-form-field>\\r\\n    <mat-form-field>\\r\\n      <textarea\\r\\n      matInput\\r\\n      rows=\\\"4\\\"\\r\\n      name = \\\"content\\\"\\r\\n      ngModel\\r\\n      placeholder=\\\"Enter Text\\\"\\r\\n      required\\r\\n      #content=\\\"ngModel\\\">\\r\\n      </textarea>\\r\\n      <mat-error\\r\\n      *ngIf=\\\"content.invalid\\\"\\r\\n      >\\r\\n      Please enter content\\r\\n      </mat-error>\\r\\n    </mat-form-field>\\r\\n\\r\\n    <hr>\\r\\n    <button\\r\\n    class=\\\"btn btn-primary\\\"\\r\\n    type=\\\"submit\\\">Submit</button>\\r\\n    </form>\\r\\n  </mat-card>\\r\\n\\r\\n</div>\\r\\n\\r\\n\\r\\n\"","import { PostsService } from './../../services/posts.service';\r\nimport { Post } from './../../models/post.models';\r\nimport { Component, OnInit, EventEmitter, Output } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-post-create',\r\n  templateUrl: './post-create.component.html',\r\n  styleUrls: ['./post-create.component.css']\r\n})\r\nexport class PostCreateComponent implements OnInit {\r\n\r\n  constructor(public postService: PostsService) { }\r\n\r\n  enteredContent = '';\r\n  enteredTitle = '';\r\n\r\n  types: string[];\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onAddPost(form: NgForm) {\r\n    if (form.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.postService.addPost(form.value.title, form.value.content);\r\n    form.resetForm();\r\n  }\r\n\r\n}\r\n","module.exports = \":host {\\r\\n  display: block;\\r\\n  margin-top: 1rem;\\r\\n}\\r\\n\\r\\n.info-text {\\r\\n  text-align: center;\\r\\n}\\r\\n\\r\\n.jumbotron {\\r\\n  background-color: aliceblue;\\r\\n  height: 100%;\\r\\n  padding: 50px 50px 50px 50px;\\r\\n  border-radius: 5px;\\r\\n}\\r\\n\"","module.exports = \"<div class = \\\"jumbotron\\\">\\r\\n<mat-accordion multi=\\\"true\\\" *ngIf=\\\"posts.length > 0\\\">\\r\\n  <mat-expansion-panel *ngFor=\\\"let p of posts\\\">\\r\\n    <mat-expansion-panel-header>\\r\\n      {{p.title}}\\r\\n    </mat-expansion-panel-header>\\r\\n    <p>{{p.content}}</p>\\r\\n    <mat-action-row>\\r\\n      <button mat-button color=\\\"primary\\\">EDIT</button>\\r\\n      <button mat-button color=\\\"warn\\\" (click) = \\\"onDelete(p.id)\\\">DELETE</button>\\r\\n    </mat-action-row>\\r\\n  </mat-expansion-panel>\\r\\n</mat-accordion>\\r\\n<p class=\\\"info-text mat-body-1\\\" *ngIf=\\\"posts.length <= 0\\\">No posts yet</p>\\r\\n</div>\\r\\n\"","import { Post } from './../../models/post.models';\r\nimport { Component, OnInit, Input, OnDestroy } from '@angular/core';\r\nimport { PostsService } from 'src/app/services/posts.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-post-list',\r\n  templateUrl: './post-list.component.html',\r\n  styleUrls: ['./post-list.component.css']\r\n})\r\nexport class PostListComponent implements OnInit, OnDestroy {\r\n\r\n  constructor(postService: PostsService) {\r\n    this.postsService = postService;\r\n  }\r\n\r\n  /*posts = [\r\n    { title: 'First post', content: 'This is the first post\\'s content' },\r\n    { title: 'Second post', content: `This is the second post's content`}\r\n  ];*/\r\n  posts: Post[] = [];\r\n  postsService: PostsService;\r\n\r\n  private postsSub: Subscription;\r\n  ngOnInit() {\r\n    this.postsService.getPosts();\r\n    this.postsSub = this.postsService.getPostUpdateListener()\r\n                      .subscribe((posts: Post[]) => {\r\n                        this.posts = posts;\r\n                      });\r\n  }\r\n\r\n  onDelete(postId: string) {\r\n    this.postsService.deletePost(postId);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.postsSub.unsubscribe();\r\n  }\r\n\r\n}\r\n","import { AttackCreateComponent } from './../pokemon/attack-create/attack-create.component';\r\nimport { MovesetCreateComponent } from './../pokemon/moveset-create/moveset-create.component';\r\nimport { PokemonListComponent } from './../pokemon/pokemon-list/pokemon-list.component';\r\nimport { PokemonCreateComponent } from './../pokemon/pokemon-create/pokemon-create.component';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {RouterModule, Routes} from '@angular/router';\r\nimport { DashboardComponent } from '../pokemon/display_dashboard/dashboard/dashboard.component';\r\nimport { StatsCreateComponent } from '../pokemon/stats-create/stats-create.component';\r\n\r\nconst routes: Routes = [\r\n  {path: '', component: PokemonCreateComponent},\r\n  {path: 'list', component: PokemonListComponent},\r\n  {path: 'moveset', component: MovesetCreateComponent},\r\n  {path: 'attack', component: AttackCreateComponent},\r\n  {path: 'display/:id', component: DashboardComponent},\r\n  {path: 'addStats', component: StatsCreateComponent}\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forRoot(routes)\r\n  ],\r\n  exports: [RouterModule],\r\n  declarations: []\r\n})\r\nexport class RoutingModule { }\r\n","import { environment } from './../../environments/environment';\r\nimport { Moveset } from './../models/pokemon/movset.model';\r\nimport { map } from 'rxjs/operators';\r\nimport { Subject, BehaviorSubject } from 'rxjs';\r\nimport { Attacks } from './../models/pokemon/attacks.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AttacksService {\r\n\r\n  // this value is used as a buffer to store all of the attacks from the db\r\n  private attackList: Attacks[] = [];\r\n  // this will store all the atacks in a feed. This is important for mat select to show the options\r\n  private allAttacksListUpdated = new Subject<Attacks[]>();\r\n\r\n  // this array will store all the selected attacks from mat-select\r\n  private selectedAttacks: Attacks[] = [];\r\n  // this array store the selected attack from mat-select in the feed\r\n  private selectedAttackFeed = new Subject<Attacks>();\r\n  // this array will store all of the selected attacks in the the feed\r\n  private allSelectedAttacks = new Subject<Attacks[]>();\r\n\r\n  // this will tell us if the moveset for a pokemon exists already\r\n  private moveset_exists: boolean;\r\n\r\n  // this will store the moveset_exists value in a feed\r\n  private moveset_existsFeed = new BehaviorSubject<boolean>(false);\r\n\r\n  // this will store the selected moveset in a feed\r\n  private selectedMoveset = new Subject<Moveset>();\r\n\r\n  private clearSelectedAttacks = new Subject<boolean>();\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  addAttack(a: Attacks) {\r\n    const url = environment.apiUrl + '/addAttack/';\r\n\r\n    console.log(a.attackName);\r\n\r\n    this.http.post<{ message: string, attackId: string }>(url, a)\r\n      .subscribe((responseData) => {\r\n        const id = responseData.attackId;\r\n        a.id = id;\r\n        this.attackList.push(a);\r\n        this.allAttacksListUpdated.next([...this.attackList]);\r\n      });\r\n\r\n  }\r\n\r\n  // something is broken with this.\r\n  // maybe I have to fix the req body!\r\n  addMoveset(moveset: {attacks: string[], pokemonId: string}) {\r\n    const url = environment.apiUrl + '/addMoveset';\r\n\r\n    this.http.post<{ message: string }>(url, moveset).subscribe();\r\n  }\r\n\r\n  getMoveset(selectedPokemon: {id: string, kdex: number, pokemonName: string}) {\r\n    const url = `http://localhost:3000/api/getMoveset/${selectedPokemon.id}`;\r\n  }\r\n\r\n  updateMoveset(m: {id: string, pokemonId: string, attacks: string[]}) {\r\n    const url = environment.apiUrl + '/updateMoveset';\r\n    const argument = m;\r\n    this.http.put<{message: string}>(url, argument).subscribe();\r\n\r\n  }\r\n\r\n  checkIfMovesetExists(selectedPokemon: { id: string, kdex: number, pokemonName: string }) {\r\n    const url = environment.apiUrl + `/checkMovesetExists/${selectedPokemon.id}/${selectedPokemon.kdex}/${selectedPokemon.pokemonName}`;\r\n\r\n    return this.http.get<{ message: string, moveset: Moveset, exists: boolean }>(url)\r\n      .subscribe((response) => {\r\n        // solution failed!! the stream is out of sync!!!!\r\n        this.moveset_exists = response.exists;\r\n        this.moveset_existsFeed.next(this.moveset_exists);\r\n\r\n        if (this.moveset_exists) {\r\n          console.log(response.moveset);\r\n          this.selectedMoveset.next(response.moveset);\r\n        }\r\n      });\r\n  }\r\n\r\n\r\n  getAttackOptions() {\r\n    const url = environment.apiUrl + '/getAttackOptions';\r\n\r\n    return this.http.get<{ message: string, attacks: any[] }>(url)\r\n      .pipe(map((attackData) => {\r\n        return attackData.attacks.map(a => {\r\n          return {\r\n            id: a._id,\r\n            attackNumber: a.attackNumber,\r\n            attackName: a.attackName,\r\n            PP: a.PP,\r\n            power: a.power,\r\n            accuracy: a.accuracy,\r\n            type: a.type,\r\n            category: a.category\r\n          };\r\n        });\r\n      }))\r\n      .subscribe((tranformedAttack) => {\r\n        this.attackList = tranformedAttack;\r\n        this.allAttacksListUpdated.next([...this.attackList]);\r\n      });\r\n  }\r\n\r\n  getAttacksListUpdatedListener() {\r\n    return this.allAttacksListUpdated.asObservable();\r\n  }\r\n\r\n  // This will get the selected attack from mat-select and push it into this attack feed\r\n  addToSelectedAttackFeed(attacks: Attacks) {\r\n    // this.selectedAttacks.push(attacks);\r\n    this.selectedAttackFeed.next(attacks);\r\n  }\r\n\r\n  // this will get the all of the attacks and put them into a feed\r\n  addToAllSelectedAttacksFeed(attacks: Attacks) {\r\n    this.selectedAttacks.push(attacks);\r\n    this.allSelectedAttacks.next([...this.selectedAttacks]);\r\n  }\r\n\r\n  addToAllSelectedAttacksFeed2(attacks: Attacks[]) {\r\n    this.selectedAttacks = attacks;\r\n    this.allSelectedAttacks.next([...this.selectedAttacks]);\r\n  }\r\n\r\n  // this will get a selected attack and remove it from the feed that contains all of the attacks\r\n  removeFromSelectedAttackFeed(attack: Attacks) {\r\n\r\n    const index = this.selectedAttacks.findIndex((a) => a.attackName === attack.attackName );\r\n    console.log('From the service: ' + index);\r\n    if ( index !== -1) {\r\n      this.selectedAttacks.splice(index, 1);\r\n    }\r\n\r\n    this.allSelectedAttacks.next([...this.selectedAttacks]);\r\n  }\r\n\r\n  // this will remove everything the feed that contains all of the selected attacks\r\n  removeAllFromSelectedAttackFeed() {\r\n\r\n    // Remove all the entries in the array\r\n    this.selectedAttacks.splice(0);\r\n\r\n    this.allSelectedAttacks.next([...this.selectedAttacks]);\r\n  }\r\n\r\n  getSelectedAttacks() {\r\n    return this.selectedAttackFeed.asObservable();\r\n  }\r\n\r\n  getAllSelectedAttacks() {\r\n    return this.allSelectedAttacks.asObservable();\r\n  }\r\n  addToMovesetExistsFeed(exist: boolean) {\r\n    this.moveset_existsFeed.next(exist);\r\n  }\r\n\r\n\r\n  // is the stream that tells us if the moveset exists\r\n  getMovesetExistFeedUpdateListener() {\r\n    return this.moveset_existsFeed.asObservable();\r\n  }\r\n\r\n  // if the moveset exists, will get the selected pokemon's moveset from the feed\r\n  getMovesetUpdateListener() {\r\n    return this.selectedMoveset.asObservable();\r\n  }\r\n\r\n  clearSelectedAttacksFeeed() {\r\n    this.clearSelectedAttacks.next(true);\r\n  }\r\n\r\n  getClearSignal() {\r\n    return this.clearSelectedAttacks.asObservable();\r\n  }\r\n}\r\n","import { environment } from './../../environments/environment';\r\nimport { Attacks } from './../models/pokemon/attacks.model';\r\nimport { map } from 'rxjs/operators';\r\nimport { Evolutions } from './../models/pokemon/evolutions.model';\r\nimport { Resistances } from 'src/app/models/pokemon/resistances.model';\r\nimport { Weaknesses } from './../models/pokemon/weaknesses.model';\r\nimport { Abilities } from './../models/pokemon/abilities.model';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Pokemon } from './../models/pokemon/pokemon.model';\r\nimport { Injectable } from '@angular/core';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PokemonService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  private pokemonOptions: {id: string, kdex: number, pokemonName: string} [];\r\n\r\n  private pokemonUpdatedOptions = new Subject<{id: string, kdex: number, pokemonName: string}[]>();\r\n\r\n\r\n  private retrievedPokemon: Pokemon;\r\n  private pokemonUpdated = new Subject<Pokemon>();\r\n\r\n  private pokemonList: Pokemon[] = [];\r\n  private pokemonUpdatedList = new Subject<Pokemon[]>();\r\n\r\n  // Used for pokemon-list to display the list of pokemon (pokedex)\r\n  private pokemonGetList: {id: string, kdex: number, pokemonName: string, types: string} [] = [];\r\n  private pokemonGetListUpdated = new Subject<{id: string, kdex: number, pokemonName: string, types: string}[]>();\r\n\r\n  private selectedPokemon: {id: string, kdex: number, pokemonName: string};\r\n  private selectedPokemonFeed = new Subject<{id: string, kdex: number, pokemonName: string}>();\r\n\r\n  addPokemon(p: Pokemon) {\r\n    const url = environment.apiUrl + '/addPokemon';\r\n\r\n    this.http.post<{message: string, pokemonId: string}>(url, p)\r\n             .subscribe( (responseData) => {\r\n               const id = responseData.pokemonId;\r\n               p.id = id;\r\n               this.pokemonList.push(p);\r\n               this.pokemonUpdatedList.next([...this.pokemonList]);\r\n             });\r\n  }\r\n\r\n  getPokemonOptions() {\r\n    const url = environment.apiUrl + '/getPokemonOptions';\r\n\r\n    return this.http.get<{messages: string, pokemon: any[]}>(url)\r\n                    .pipe(map((pokemonData) => {\r\n                      return pokemonData.pokemon.map( p => {\r\n                       return {\r\n                         id: p._id,\r\n                         kdex: p.kdex,\r\n                         pokemonName: p.pokemonName\r\n                       };\r\n                      });\r\n                    }))\r\n                    .subscribe( (transformedPokemon) => {\r\n\r\n                      this.pokemonOptions = transformedPokemon;\r\n\r\n                      // console.log(this.pokemonOptions);\r\n                      this.pokemonUpdatedOptions.next([...this.pokemonOptions]);\r\n                    });\r\n  }\r\n\r\n  // for pokemon-list Won't work for some reason\r\n  getPokemon() {\r\n    const url = environment.apiUrl + '/getPokemon';\r\n\r\n    return this.http.get<{messages: string, pokemon: any[]}>(url)\r\n                    .pipe( map( (responseData) => {\r\n                      return responseData.pokemon.map( p => {\r\n                        return {\r\n                          id: p.id,\r\n                          kdex: p.kdex,\r\n                          pokemonName: p.pokemonName,\r\n                          types: p.types\r\n                        };\r\n                      });\r\n                    }))\r\n                    .subscribe((responseData) => {\r\n\r\n                      this.pokemonGetList = responseData;\r\n\r\n                      this.pokemonGetListUpdated.next([...this.pokemonGetList]);\r\n\r\n                    });\r\n\r\n  }\r\n\r\n  getAPokemon(id: string) {\r\n    const url = environment.apiUrl + `/getPokemon/${id}`;\r\n\r\n    return this.http.get<{message: string, pokemon: Pokemon}>(url).subscribe((resposeData) => {\r\n      this.retrievedPokemon = resposeData.pokemon;\r\n      this.pokemonUpdated.next(this.retrievedPokemon);\r\n    });\r\n  }\r\n\r\n  getPokemonOptionsUpdateListener() {\r\n    return this.pokemonUpdatedOptions.asObservable();\r\n  }\r\n\r\n  // Getting the feed of the selected pokemon\r\n  addToSelectedPokemonFeed(pokemon: {id: string, kdex: number, pokemonName: string}) {\r\n    this.selectedPokemonFeed.next(pokemon);\r\n  }\r\n\r\n  // The Movset List Component will retrieve the value selected from the form\r\n  getSelectedPokemon() {\r\n    return this.selectedPokemonFeed.asObservable();\r\n  }\r\n\r\n  // Used for pokemon-list and will be able to access desired data\r\n  getPokemonGetListUpdatedListener() {\r\n    return this.pokemonGetListUpdated.asObservable();\r\n  }\r\n\r\n  getPokemonUpdatedListener() {\r\n    return this.pokemonUpdated.asObservable();\r\n  }\r\n\r\n}\r\n","import { Post } from './../models/post.models';\r\nimport { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {map} from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PostsService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  private posts: Post[] = [];\r\n  private postsUpdated = new Subject<Post[]>();\r\n\r\n  getPosts() {\r\n    const url = 'http://localhost:3000/api/posts';\r\n    return this.http.get<{messages: string, posts: any[]}>(url)\r\n    .pipe(map( (postData) => {\r\n      return postData.posts.map(post => {\r\n        return {\r\n          title: post.title,\r\n          content: post.content,\r\n          id: post._id\r\n        };\r\n      });\r\n    }))\r\n    .subscribe( (transfomredPosts) => {\r\n      this.posts = transfomredPosts;\r\n      this.postsUpdated.next([...this.posts]);\r\n    });\r\n  }\r\n\r\n  addPost(title: string, content: string) {\r\n    const url = 'http://localhost:3000/api/posts';\r\n    const post: Post = {\r\n      id: null,\r\n      title: title,\r\n      content: content\r\n    };\r\n    this.http.post<{message: string, postId: string}>(url, post)\r\n                  .subscribe((responseData) => {\r\n                    const id = responseData.postId;\r\n                    post.id = id;\r\n                    this.posts.push(post);\r\n                    this.postsUpdated.next([...this.posts]);\r\n                  });\r\n  }\r\n\r\n  getPostUpdateListener() {\r\n    return this.postsUpdated.asObservable();\r\n  }\r\n\r\n  deletePost(postId: string) {\r\n    const url = 'http://localhost:3000/api/posts/';\r\n    this.http.delete(url + postId).subscribe(() => {\r\n      const updatedPosts = this.posts.filter(post => post.id.toString() !== postId);\r\n      this.posts = updatedPosts;\r\n      this.postsUpdated.next([...this.posts]);\r\n    });\r\n  }\r\n}\r\n","import { environment } from './../../environments/environment';\r\nimport { Stats } from './../models/pokemon/stats.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StatsService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  addStat(pokemon: {id: string, kdex: number, pokemonName: string}, stats: Stats) {\r\n    const url = environment.apiUrl + `/addStats/${pokemon.id}`;\r\n\r\n    this.http.post<{message: string}>(url, stats).subscribe((response) => {\r\n      console.log(response.message);\r\n    });\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  apiUrl: 'http://localhost:3000/api'\r\n};\r\n\r\n/*\r\n * In development mode, to ignore zone related error stack frames such as\r\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\r\n * import the following file, but please comment it out in production mode\r\n * because it will have performance impact when throw error\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}